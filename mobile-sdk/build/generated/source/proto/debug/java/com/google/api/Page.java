// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/documentation.proto

package com.google.api;

/**
 * <pre>
 * Represents a documentation page. A page can contain subpages to represent
 * nested documentation set structure.
 * </pre>
 *
 * Protobuf type {@code google.api.Page}
 */
public  final class Page extends
    com.google.protobuf.GeneratedMessageLite<
        Page, Page.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.Page)
    PageOrBuilder {
  private Page() {
    name_ = "";
    content_ = "";
    subpages_ = emptyProtobufList();
  }
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * &lt;pre&gt;&lt;code&gt;pages:
   * - name: Tutorial
   *   content: &amp;#40;== include tutorial.md ==&amp;#41;
   *   subpages:
   *   - name: Java
   *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
   * &lt;/code&gt;&lt;/pre&gt;
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * &lt;pre&gt;&lt;code&gt;pages:
   * - name: Tutorial
   *   content: &amp;#40;== include tutorial.md ==&amp;#41;
   *   subpages:
   *   - name: Java
   *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
   * &lt;/code&gt;&lt;/pre&gt;
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * &lt;pre&gt;&lt;code&gt;pages:
   * - name: Tutorial
   *   content: &amp;#40;== include tutorial.md ==&amp;#41;
   *   subpages:
   *   - name: Java
   *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
   * &lt;/code&gt;&lt;/pre&gt;
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * &lt;pre&gt;&lt;code&gt;pages:
   * - name: Tutorial
   *   content: &amp;#40;== include tutorial.md ==&amp;#41;
   *   subpages:
   *   - name: Java
   *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
   * &lt;/code&gt;&lt;/pre&gt;
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * &lt;pre&gt;&lt;code&gt;pages:
   * - name: Tutorial
   *   content: &amp;#40;== include tutorial.md ==&amp;#41;
   *   subpages:
   *   - name: Java
   *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
   * &lt;/code&gt;&lt;/pre&gt;
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int CONTENT_FIELD_NUMBER = 2;
  private java.lang.String content_;
  /**
   * <pre>
   * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
   * to include content from a Markdown file.
   * </pre>
   *
   * <code>string content = 2;</code>
   * @return The content.
   */
  @java.lang.Override
  public java.lang.String getContent() {
    return content_;
  }
  /**
   * <pre>
   * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
   * to include content from a Markdown file.
   * </pre>
   *
   * <code>string content = 2;</code>
   * @return The bytes for content.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getContentBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(content_);
  }
  /**
   * <pre>
   * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
   * to include content from a Markdown file.
   * </pre>
   *
   * <code>string content = 2;</code>
   * @param value The content to set.
   */
  private void setContent(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    content_ = value;
  }
  /**
   * <pre>
   * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
   * to include content from a Markdown file.
   * </pre>
   *
   * <code>string content = 2;</code>
   */
  private void clearContent() {
    
    content_ = getDefaultInstance().getContent();
  }
  /**
   * <pre>
   * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
   * to include content from a Markdown file.
   * </pre>
   *
   * <code>string content = 2;</code>
   * @param value The bytes for content to set.
   */
  private void setContentBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    content_ = value.toStringUtf8();
    
  }

  public static final int SUBPAGES_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.Page> subpages_;
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.api.Page> getSubpagesList() {
    return subpages_;
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  public java.util.List<? extends com.google.api.PageOrBuilder> 
      getSubpagesOrBuilderList() {
    return subpages_;
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  @java.lang.Override
  public int getSubpagesCount() {
    return subpages_.size();
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  @java.lang.Override
  public com.google.api.Page getSubpages(int index) {
    return subpages_.get(index);
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  public com.google.api.PageOrBuilder getSubpagesOrBuilder(
      int index) {
    return subpages_.get(index);
  }
  private void ensureSubpagesIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.api.Page> tmp = subpages_;
    if (!tmp.isModifiable()) {
      subpages_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void setSubpages(
      int index, com.google.api.Page value) {
    value.getClass();
  ensureSubpagesIsMutable();
    subpages_.set(index, value);
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void addSubpages(com.google.api.Page value) {
    value.getClass();
  ensureSubpagesIsMutable();
    subpages_.add(value);
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void addSubpages(
      int index, com.google.api.Page value) {
    value.getClass();
  ensureSubpagesIsMutable();
    subpages_.add(index, value);
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void addAllSubpages(
      java.lang.Iterable<? extends com.google.api.Page> values) {
    ensureSubpagesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, subpages_);
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void clearSubpages() {
    subpages_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   * </pre>
   *
   * <code>repeated .google.api.Page subpages = 3;</code>
   */
  private void removeSubpages(int index) {
    ensureSubpagesIsMutable();
    subpages_.remove(index);
  }

  public static com.google.api.Page parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.Page parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.Page parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Page parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.Page parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Page parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.Page parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.Page prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Represents a documentation page. A page can contain subpages to represent
   * nested documentation set structure.
   * </pre>
   *
   * Protobuf type {@code google.api.Page}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.Page, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.Page)
      com.google.api.PageOrBuilder {
    // Construct using com.google.api.Page.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * &lt;pre&gt;&lt;code&gt;pages:
     * - name: Tutorial
     *   content: &amp;#40;== include tutorial.md ==&amp;#41;
     *   subpages:
     *   - name: Java
     *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
     * &lt;/code&gt;&lt;/pre&gt;
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * &lt;pre&gt;&lt;code&gt;pages:
     * - name: Tutorial
     *   content: &amp;#40;== include tutorial.md ==&amp;#41;
     *   subpages:
     *   - name: Java
     *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
     * &lt;/code&gt;&lt;/pre&gt;
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * &lt;pre&gt;&lt;code&gt;pages:
     * - name: Tutorial
     *   content: &amp;#40;== include tutorial.md ==&amp;#41;
     *   subpages:
     *   - name: Java
     *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
     * &lt;/code&gt;&lt;/pre&gt;
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * &lt;pre&gt;&lt;code&gt;pages:
     * - name: Tutorial
     *   content: &amp;#40;== include tutorial.md ==&amp;#41;
     *   subpages:
     *   - name: Java
     *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
     * &lt;/code&gt;&lt;/pre&gt;
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The name of the page. It will be used as an identity of the page to
     * generate URI of the page, text of the link to this page in navigation,
     * etc. The full page name (start from the root page name to this page
     * concatenated with `.`) can be used as reference to the page in your
     * documentation. For example:
     * &lt;pre&gt;&lt;code&gt;pages:
     * - name: Tutorial
     *   content: &amp;#40;== include tutorial.md ==&amp;#41;
     *   subpages:
     *   - name: Java
     *     content: &amp;#40;== include tutorial_java.md ==&amp;#41;
     * &lt;/code&gt;&lt;/pre&gt;
     * You can reference `Java` page using Markdown reference link syntax:
     * `[Java][Tutorial.Java]`.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
     * to include content from a Markdown file.
     * </pre>
     *
     * <code>string content = 2;</code>
     * @return The content.
     */
    @java.lang.Override
    public java.lang.String getContent() {
      return instance.getContent();
    }
    /**
     * <pre>
     * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
     * to include content from a Markdown file.
     * </pre>
     *
     * <code>string content = 2;</code>
     * @return The bytes for content.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getContentBytes() {
      return instance.getContentBytes();
    }
    /**
     * <pre>
     * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
     * to include content from a Markdown file.
     * </pre>
     *
     * <code>string content = 2;</code>
     * @param value The content to set.
     * @return This builder for chaining.
     */
    public Builder setContent(
        java.lang.String value) {
      copyOnWrite();
      instance.setContent(value);
      return this;
    }
    /**
     * <pre>
     * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
     * to include content from a Markdown file.
     * </pre>
     *
     * <code>string content = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearContent() {
      copyOnWrite();
      instance.clearContent();
      return this;
    }
    /**
     * <pre>
     * The Markdown content of the page. You can use &lt;code&gt;&amp;#40;== include {path} ==&amp;#41;&lt;/code&gt;
     * to include content from a Markdown file.
     * </pre>
     *
     * <code>string content = 2;</code>
     * @param value The bytes for content to set.
     * @return This builder for chaining.
     */
    public Builder setContentBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setContentBytes(value);
      return this;
    }

    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.api.Page> getSubpagesList() {
      return java.util.Collections.unmodifiableList(
          instance.getSubpagesList());
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    @java.lang.Override
    public int getSubpagesCount() {
      return instance.getSubpagesCount();
    }/**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    @java.lang.Override
    public com.google.api.Page getSubpages(int index) {
      return instance.getSubpages(index);
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder setSubpages(
        int index, com.google.api.Page value) {
      copyOnWrite();
      instance.setSubpages(index, value);
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder setSubpages(
        int index, com.google.api.Page.Builder builderForValue) {
      copyOnWrite();
      instance.setSubpages(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder addSubpages(com.google.api.Page value) {
      copyOnWrite();
      instance.addSubpages(value);
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder addSubpages(
        int index, com.google.api.Page value) {
      copyOnWrite();
      instance.addSubpages(index, value);
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder addSubpages(
        com.google.api.Page.Builder builderForValue) {
      copyOnWrite();
      instance.addSubpages(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder addSubpages(
        int index, com.google.api.Page.Builder builderForValue) {
      copyOnWrite();
      instance.addSubpages(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder addAllSubpages(
        java.lang.Iterable<? extends com.google.api.Page> values) {
      copyOnWrite();
      instance.addAllSubpages(values);
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder clearSubpages() {
      copyOnWrite();
      instance.clearSubpages();
      return this;
    }
    /**
     * <pre>
     * Subpages of this page. The order of subpages specified here will be
     * honored in the generated docset.
     * </pre>
     *
     * <code>repeated .google.api.Page subpages = 3;</code>
     */
    public Builder removeSubpages(int index) {
      copyOnWrite();
      instance.removeSubpages(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.Page)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.Page();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "name_",
            "content_",
            "subpages_",
            com.google.api.Page.class,
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u0208\u0002\u0208" +
              "\u0003\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.Page> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.Page.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.Page>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.Page)
  private static final com.google.api.Page DEFAULT_INSTANCE;
  static {
    Page defaultInstance = new Page();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Page.class, defaultInstance);
  }

  public static com.google.api.Page getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Page> PARSER;

  public static com.google.protobuf.Parser<Page> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/compiler/plugin.proto

package com.google.protobuf.compiler;

public final class PluginProtos {
  private PluginProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface VersionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.protobuf.compiler.Version)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 major = 1;</code>
     * @return Whether the major field is set.
     */
    boolean hasMajor();
    /**
     * <code>optional int32 major = 1;</code>
     * @return The major.
     */
    int getMajor();

    /**
     * <code>optional int32 minor = 2;</code>
     * @return Whether the minor field is set.
     */
    boolean hasMinor();
    /**
     * <code>optional int32 minor = 2;</code>
     * @return The minor.
     */
    int getMinor();

    /**
     * <code>optional int32 patch = 3;</code>
     * @return Whether the patch field is set.
     */
    boolean hasPatch();
    /**
     * <code>optional int32 patch = 3;</code>
     * @return The patch.
     */
    int getPatch();

    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return Whether the suffix field is set.
     */
    boolean hasSuffix();
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return The suffix.
     */
    java.lang.String getSuffix();
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return The bytes for suffix.
     */
    com.google.protobuf.ByteString
        getSuffixBytes();
  }
  /**
   * <pre>
   * The version number of protocol compiler.
   * </pre>
   *
   * Protobuf type {@code google.protobuf.compiler.Version}
   */
  public  static final class Version extends
      com.google.protobuf.GeneratedMessageLite<
          Version, Version.Builder> implements
      // @@protoc_insertion_point(message_implements:google.protobuf.compiler.Version)
      VersionOrBuilder {
    private Version() {
      suffix_ = "";
    }
    private int bitField0_;
    public static final int MAJOR_FIELD_NUMBER = 1;
    private int major_;
    /**
     * <code>optional int32 major = 1;</code>
     * @return Whether the major field is set.
     */
    @java.lang.Override
    public boolean hasMajor() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 major = 1;</code>
     * @return The major.
     */
    @java.lang.Override
    public int getMajor() {
      return major_;
    }
    /**
     * <code>optional int32 major = 1;</code>
     * @param value The major to set.
     */
    private void setMajor(int value) {
      bitField0_ |= 0x00000001;
      major_ = value;
    }
    /**
     * <code>optional int32 major = 1;</code>
     */
    private void clearMajor() {
      bitField0_ = (bitField0_ & ~0x00000001);
      major_ = 0;
    }

    public static final int MINOR_FIELD_NUMBER = 2;
    private int minor_;
    /**
     * <code>optional int32 minor = 2;</code>
     * @return Whether the minor field is set.
     */
    @java.lang.Override
    public boolean hasMinor() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 minor = 2;</code>
     * @return The minor.
     */
    @java.lang.Override
    public int getMinor() {
      return minor_;
    }
    /**
     * <code>optional int32 minor = 2;</code>
     * @param value The minor to set.
     */
    private void setMinor(int value) {
      bitField0_ |= 0x00000002;
      minor_ = value;
    }
    /**
     * <code>optional int32 minor = 2;</code>
     */
    private void clearMinor() {
      bitField0_ = (bitField0_ & ~0x00000002);
      minor_ = 0;
    }

    public static final int PATCH_FIELD_NUMBER = 3;
    private int patch_;
    /**
     * <code>optional int32 patch = 3;</code>
     * @return Whether the patch field is set.
     */
    @java.lang.Override
    public boolean hasPatch() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 patch = 3;</code>
     * @return The patch.
     */
    @java.lang.Override
    public int getPatch() {
      return patch_;
    }
    /**
     * <code>optional int32 patch = 3;</code>
     * @param value The patch to set.
     */
    private void setPatch(int value) {
      bitField0_ |= 0x00000004;
      patch_ = value;
    }
    /**
     * <code>optional int32 patch = 3;</code>
     */
    private void clearPatch() {
      bitField0_ = (bitField0_ & ~0x00000004);
      patch_ = 0;
    }

    public static final int SUFFIX_FIELD_NUMBER = 4;
    private java.lang.String suffix_;
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return Whether the suffix field is set.
     */
    @java.lang.Override
    public boolean hasSuffix() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return The suffix.
     */
    @java.lang.Override
    public java.lang.String getSuffix() {
      return suffix_;
    }
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @return The bytes for suffix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSuffixBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(suffix_);
    }
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @param value The suffix to set.
     */
    private void setSuffix(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000008;
      suffix_ = value;
    }
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     */
    private void clearSuffix() {
      bitField0_ = (bitField0_ & ~0x00000008);
      suffix_ = getDefaultInstance().getSuffix();
    }
    /**
     * <pre>
     * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
     * be empty for mainline stable releases.
     * </pre>
     *
     * <code>optional string suffix = 4;</code>
     * @param value The bytes for suffix to set.
     */
    private void setSuffixBytes(
        com.google.protobuf.ByteString value) {
      suffix_ = value.toStringUtf8();
      bitField0_ |= 0x00000008;
    }

    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.Version parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.compiler.PluginProtos.Version prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.compiler.Version}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.compiler.PluginProtos.Version, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.protobuf.compiler.Version)
        com.google.protobuf.compiler.PluginProtos.VersionOrBuilder {
      // Construct using com.google.protobuf.compiler.PluginProtos.Version.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional int32 major = 1;</code>
       * @return Whether the major field is set.
       */
      @java.lang.Override
      public boolean hasMajor() {
        return instance.hasMajor();
      }
      /**
       * <code>optional int32 major = 1;</code>
       * @return The major.
       */
      @java.lang.Override
      public int getMajor() {
        return instance.getMajor();
      }
      /**
       * <code>optional int32 major = 1;</code>
       * @param value The major to set.
       * @return This builder for chaining.
       */
      public Builder setMajor(int value) {
        copyOnWrite();
        instance.setMajor(value);
        return this;
      }
      /**
       * <code>optional int32 major = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMajor() {
        copyOnWrite();
        instance.clearMajor();
        return this;
      }

      /**
       * <code>optional int32 minor = 2;</code>
       * @return Whether the minor field is set.
       */
      @java.lang.Override
      public boolean hasMinor() {
        return instance.hasMinor();
      }
      /**
       * <code>optional int32 minor = 2;</code>
       * @return The minor.
       */
      @java.lang.Override
      public int getMinor() {
        return instance.getMinor();
      }
      /**
       * <code>optional int32 minor = 2;</code>
       * @param value The minor to set.
       * @return This builder for chaining.
       */
      public Builder setMinor(int value) {
        copyOnWrite();
        instance.setMinor(value);
        return this;
      }
      /**
       * <code>optional int32 minor = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinor() {
        copyOnWrite();
        instance.clearMinor();
        return this;
      }

      /**
       * <code>optional int32 patch = 3;</code>
       * @return Whether the patch field is set.
       */
      @java.lang.Override
      public boolean hasPatch() {
        return instance.hasPatch();
      }
      /**
       * <code>optional int32 patch = 3;</code>
       * @return The patch.
       */
      @java.lang.Override
      public int getPatch() {
        return instance.getPatch();
      }
      /**
       * <code>optional int32 patch = 3;</code>
       * @param value The patch to set.
       * @return This builder for chaining.
       */
      public Builder setPatch(int value) {
        copyOnWrite();
        instance.setPatch(value);
        return this;
      }
      /**
       * <code>optional int32 patch = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearPatch() {
        copyOnWrite();
        instance.clearPatch();
        return this;
      }

      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @return Whether the suffix field is set.
       */
      @java.lang.Override
      public boolean hasSuffix() {
        return instance.hasSuffix();
      }
      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @return The suffix.
       */
      @java.lang.Override
      public java.lang.String getSuffix() {
        return instance.getSuffix();
      }
      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @return The bytes for suffix.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSuffixBytes() {
        return instance.getSuffixBytes();
      }
      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @param value The suffix to set.
       * @return This builder for chaining.
       */
      public Builder setSuffix(
          java.lang.String value) {
        copyOnWrite();
        instance.setSuffix(value);
        return this;
      }
      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearSuffix() {
        copyOnWrite();
        instance.clearSuffix();
        return this;
      }
      /**
       * <pre>
       * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
       * be empty for mainline stable releases.
       * </pre>
       *
       * <code>optional string suffix = 4;</code>
       * @param value The bytes for suffix to set.
       * @return This builder for chaining.
       */
      public Builder setSuffixBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSuffixBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.protobuf.compiler.Version)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.compiler.PluginProtos.Version();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "major_",
              "minor_",
              "patch_",
              "suffix_",
            };
            java.lang.String info =
                "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1004\u0000\u0002" +
                "\u1004\u0001\u0003\u1004\u0002\u0004\u1008\u0003";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.compiler.PluginProtos.Version> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.compiler.PluginProtos.Version.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.compiler.PluginProtos.Version>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.compiler.Version)
    private static final com.google.protobuf.compiler.PluginProtos.Version DEFAULT_INSTANCE;
    static {
      Version defaultInstance = new Version();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Version.class, defaultInstance);
    }

    public static com.google.protobuf.compiler.PluginProtos.Version getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Version> PARSER;

    public static com.google.protobuf.Parser<Version> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CodeGeneratorRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @return A list containing the fileToGenerate.
     */
    java.util.List<java.lang.String>
        getFileToGenerateList();
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @return The count of fileToGenerate.
     */
    int getFileToGenerateCount();
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param index The index of the element to return.
     * @return The fileToGenerate at the given index.
     */
    java.lang.String getFileToGenerate(int index);
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param index The index of the element to return.
     * @return The fileToGenerate at the given index.
     */
    com.google.protobuf.ByteString
        getFileToGenerateBytes(int index);

    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return Whether the parameter field is set.
     */
    boolean hasParameter();
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return The parameter.
     */
    java.lang.String getParameter();
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return The bytes for parameter.
     */
    com.google.protobuf.ByteString
        getParameterBytes();

    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> 
        getProtoFileList();
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    com.google.protobuf.DescriptorProtos.FileDescriptorProto getProtoFile(int index);
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    int getProtoFileCount();

    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> 
        getSourceFileDescriptorsList();
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    com.google.protobuf.DescriptorProtos.FileDescriptorProto getSourceFileDescriptors(int index);
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    int getSourceFileDescriptorsCount();

    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     * @return Whether the compilerVersion field is set.
     */
    boolean hasCompilerVersion();
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     * @return The compilerVersion.
     */
    com.google.protobuf.compiler.PluginProtos.Version getCompilerVersion();
  }
  /**
   * <pre>
   * An encoded CodeGeneratorRequest is written to the plugin's stdin.
   * </pre>
   *
   * Protobuf type {@code google.protobuf.compiler.CodeGeneratorRequest}
   */
  public  static final class CodeGeneratorRequest extends
      com.google.protobuf.GeneratedMessageLite<
          CodeGeneratorRequest, CodeGeneratorRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorRequest)
      CodeGeneratorRequestOrBuilder {
    private CodeGeneratorRequest() {
      fileToGenerate_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      parameter_ = "";
      protoFile_ = emptyProtobufList();
      sourceFileDescriptors_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FILE_TO_GENERATE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<java.lang.String> fileToGenerate_;
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @return A list containing the fileToGenerate.
     */
    @java.lang.Override
    public java.util.List<java.lang.String> getFileToGenerateList() {
      return fileToGenerate_;
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @return The count of fileToGenerate.
     */
    @java.lang.Override
    public int getFileToGenerateCount() {
      return fileToGenerate_.size();
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param index The index of the element to return.
     * @return The fileToGenerate at the given index.
     */
    @java.lang.Override
    public java.lang.String getFileToGenerate(int index) {
      return fileToGenerate_.get(index);
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the fileToGenerate at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFileToGenerateBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          fileToGenerate_.get(index));
    }
    private void ensureFileToGenerateIsMutable() {
      com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
          fileToGenerate_;  if (!tmp.isModifiable()) {
        fileToGenerate_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param index The index to set the value at.
     * @param value The fileToGenerate to set.
     */
    private void setFileToGenerate(
        int index, java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensureFileToGenerateIsMutable();
      fileToGenerate_.set(index, value);
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param value The fileToGenerate to add.
     */
    private void addFileToGenerate(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensureFileToGenerateIsMutable();
      fileToGenerate_.add(value);
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param values The fileToGenerate to add.
     */
    private void addAllFileToGenerate(
        java.lang.Iterable<java.lang.String> values) {
      ensureFileToGenerateIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, fileToGenerate_);
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     */
    private void clearFileToGenerate() {
      fileToGenerate_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * The .proto files that were explicitly listed on the command-line.  The
     * code generator should generate code only for these files.  Each file's
     * descriptor will be included in proto_file, below.
     * </pre>
     *
     * <code>repeated string file_to_generate = 1;</code>
     * @param value The bytes of the fileToGenerate to add.
     */
    private void addFileToGenerateBytes(
        com.google.protobuf.ByteString value) {
      ensureFileToGenerateIsMutable();
      fileToGenerate_.add(value.toStringUtf8());
    }

    public static final int PARAMETER_FIELD_NUMBER = 2;
    private java.lang.String parameter_;
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return Whether the parameter field is set.
     */
    @java.lang.Override
    public boolean hasParameter() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return The parameter.
     */
    @java.lang.Override
    public java.lang.String getParameter() {
      return parameter_;
    }
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @return The bytes for parameter.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getParameterBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(parameter_);
    }
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @param value The parameter to set.
     */
    private void setParameter(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000001;
      parameter_ = value;
    }
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     */
    private void clearParameter() {
      bitField0_ = (bitField0_ & ~0x00000001);
      parameter_ = getDefaultInstance().getParameter();
    }
    /**
     * <pre>
     * The generator parameter passed on the command-line.
     * </pre>
     *
     * <code>optional string parameter = 2;</code>
     * @param value The bytes for parameter to set.
     */
    private void setParameterBytes(
        com.google.protobuf.ByteString value) {
      parameter_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int PROTO_FILE_FIELD_NUMBER = 15;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.DescriptorProtos.FileDescriptorProto> protoFile_;
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> getProtoFileList() {
      return protoFile_;
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    public java.util.List<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProtoOrBuilder> 
        getProtoFileOrBuilderList() {
      return protoFile_;
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    @java.lang.Override
    public int getProtoFileCount() {
      return protoFile_.size();
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DescriptorProtos.FileDescriptorProto getProtoFile(int index) {
      return protoFile_.get(index);
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    public com.google.protobuf.DescriptorProtos.FileDescriptorProtoOrBuilder getProtoFileOrBuilder(
        int index) {
      return protoFile_.get(index);
    }
    private void ensureProtoFileIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.DescriptorProtos.FileDescriptorProto> tmp = protoFile_;
      if (!tmp.isModifiable()) {
        protoFile_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void setProtoFile(
        int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureProtoFileIsMutable();
      protoFile_.set(index, value);
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void addProtoFile(com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureProtoFileIsMutable();
      protoFile_.add(value);
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void addProtoFile(
        int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureProtoFileIsMutable();
      protoFile_.add(index, value);
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void addAllProtoFile(
        java.lang.Iterable<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProto> values) {
      ensureProtoFileIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, protoFile_);
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void clearProtoFile() {
      protoFile_ = emptyProtobufList();
    }
    /**
     * <pre>
     * FileDescriptorProtos for all files in files_to_generate and everything
     * they import.  The files will appear in topological order, so each file
     * appears before any file that imports it.
     * Note: the files listed in files_to_generate will include runtime-retention
     * options only, but all other files will include source-retention options.
     * The source_file_descriptors field below is available in case you need
     * source-retention options for files_to_generate.
     * protoc guarantees that all proto_files will be written after
     * the fields above, even though this is not technically guaranteed by the
     * protobuf wire format.  This theoretically could allow a plugin to stream
     * in the FileDescriptorProtos and handle them one by one rather than read
     * the entire set into memory at once.  However, as of this writing, this
     * is not similarly optimized on protoc's end -- it will store all fields in
     * memory at once before sending them to the plugin.
     * Type names of fields and extensions in the FileDescriptorProto are always
     * fully qualified.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
     */
    private void removeProtoFile(int index) {
      ensureProtoFileIsMutable();
      protoFile_.remove(index);
    }

    public static final int SOURCE_FILE_DESCRIPTORS_FIELD_NUMBER = 17;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.DescriptorProtos.FileDescriptorProto> sourceFileDescriptors_;
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> getSourceFileDescriptorsList() {
      return sourceFileDescriptors_;
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    public java.util.List<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProtoOrBuilder> 
        getSourceFileDescriptorsOrBuilderList() {
      return sourceFileDescriptors_;
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    @java.lang.Override
    public int getSourceFileDescriptorsCount() {
      return sourceFileDescriptors_.size();
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    @java.lang.Override
    public com.google.protobuf.DescriptorProtos.FileDescriptorProto getSourceFileDescriptors(int index) {
      return sourceFileDescriptors_.get(index);
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    public com.google.protobuf.DescriptorProtos.FileDescriptorProtoOrBuilder getSourceFileDescriptorsOrBuilder(
        int index) {
      return sourceFileDescriptors_.get(index);
    }
    private void ensureSourceFileDescriptorsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.DescriptorProtos.FileDescriptorProto> tmp = sourceFileDescriptors_;
      if (!tmp.isModifiable()) {
        sourceFileDescriptors_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void setSourceFileDescriptors(
        int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureSourceFileDescriptorsIsMutable();
      sourceFileDescriptors_.set(index, value);
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void addSourceFileDescriptors(com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureSourceFileDescriptorsIsMutable();
      sourceFileDescriptors_.add(value);
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void addSourceFileDescriptors(
        int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
      value.getClass();
  ensureSourceFileDescriptorsIsMutable();
      sourceFileDescriptors_.add(index, value);
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void addAllSourceFileDescriptors(
        java.lang.Iterable<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProto> values) {
      ensureSourceFileDescriptorsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, sourceFileDescriptors_);
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void clearSourceFileDescriptors() {
      sourceFileDescriptors_ = emptyProtobufList();
    }
    /**
     * <pre>
     * File descriptors with all options, including source-retention options.
     * These descriptors are only provided for the files listed in
     * files_to_generate.
     * </pre>
     *
     * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
     */
    private void removeSourceFileDescriptors(int index) {
      ensureSourceFileDescriptorsIsMutable();
      sourceFileDescriptors_.remove(index);
    }

    public static final int COMPILER_VERSION_FIELD_NUMBER = 3;
    private com.google.protobuf.compiler.PluginProtos.Version compilerVersion_;
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     */
    @java.lang.Override
    public boolean hasCompilerVersion() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     */
    @java.lang.Override
    public com.google.protobuf.compiler.PluginProtos.Version getCompilerVersion() {
      return compilerVersion_ == null ? com.google.protobuf.compiler.PluginProtos.Version.getDefaultInstance() : compilerVersion_;
    }
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     */
    private void setCompilerVersion(com.google.protobuf.compiler.PluginProtos.Version value) {
      value.getClass();
  compilerVersion_ = value;
      bitField0_ |= 0x00000002;
      }
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeCompilerVersion(com.google.protobuf.compiler.PluginProtos.Version value) {
      value.getClass();
  if (compilerVersion_ != null &&
          compilerVersion_ != com.google.protobuf.compiler.PluginProtos.Version.getDefaultInstance()) {
        compilerVersion_ =
          com.google.protobuf.compiler.PluginProtos.Version.newBuilder(compilerVersion_).mergeFrom(value).buildPartial();
      } else {
        compilerVersion_ = value;
      }
      bitField0_ |= 0x00000002;
    }
    /**
     * <pre>
     * The version number of protocol compiler.
     * </pre>
     *
     * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
     */
    private void clearCompilerVersion() {  compilerVersion_ = null;
      bitField0_ = (bitField0_ & ~0x00000002);
    }

    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * An encoded CodeGeneratorRequest is written to the plugin's stdin.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.compiler.CodeGeneratorRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorRequest)
        com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequestOrBuilder {
      // Construct using com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @return A list containing the fileToGenerate.
       */
      @java.lang.Override
      public java.util.List<java.lang.String>
          getFileToGenerateList() {
        return java.util.Collections.unmodifiableList(
            instance.getFileToGenerateList());
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @return The count of fileToGenerate.
       */
      @java.lang.Override
      public int getFileToGenerateCount() {
        return instance.getFileToGenerateCount();
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param index The index of the element to return.
       * @return The fileToGenerate at the given index.
       */
      @java.lang.Override
      public java.lang.String getFileToGenerate(int index) {
        return instance.getFileToGenerate(index);
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param index The index of the value to return.
       * @return The bytes of the fileToGenerate at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFileToGenerateBytes(int index) {
        return instance.getFileToGenerateBytes(index);
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param index The index to set the value at.
       * @param value The fileToGenerate to set.
       * @return This builder for chaining.
       */
      public Builder setFileToGenerate(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setFileToGenerate(index, value);
        return this;
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param value The fileToGenerate to add.
       * @return This builder for chaining.
       */
      public Builder addFileToGenerate(
          java.lang.String value) {
        copyOnWrite();
        instance.addFileToGenerate(value);
        return this;
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param values The fileToGenerate to add.
       * @return This builder for chaining.
       */
      public Builder addAllFileToGenerate(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllFileToGenerate(values);
        return this;
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFileToGenerate() {
        copyOnWrite();
        instance.clearFileToGenerate();
        return this;
      }
      /**
       * <pre>
       * The .proto files that were explicitly listed on the command-line.  The
       * code generator should generate code only for these files.  Each file's
       * descriptor will be included in proto_file, below.
       * </pre>
       *
       * <code>repeated string file_to_generate = 1;</code>
       * @param value The bytes of the fileToGenerate to add.
       * @return This builder for chaining.
       */
      public Builder addFileToGenerateBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addFileToGenerateBytes(value);
        return this;
      }

      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @return Whether the parameter field is set.
       */
      @java.lang.Override
      public boolean hasParameter() {
        return instance.hasParameter();
      }
      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @return The parameter.
       */
      @java.lang.Override
      public java.lang.String getParameter() {
        return instance.getParameter();
      }
      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @return The bytes for parameter.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getParameterBytes() {
        return instance.getParameterBytes();
      }
      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @param value The parameter to set.
       * @return This builder for chaining.
       */
      public Builder setParameter(
          java.lang.String value) {
        copyOnWrite();
        instance.setParameter(value);
        return this;
      }
      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearParameter() {
        copyOnWrite();
        instance.clearParameter();
        return this;
      }
      /**
       * <pre>
       * The generator parameter passed on the command-line.
       * </pre>
       *
       * <code>optional string parameter = 2;</code>
       * @param value The bytes for parameter to set.
       * @return This builder for chaining.
       */
      public Builder setParameterBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setParameterBytes(value);
        return this;
      }

      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> getProtoFileList() {
        return java.util.Collections.unmodifiableList(
            instance.getProtoFileList());
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      @java.lang.Override
      public int getProtoFileCount() {
        return instance.getProtoFileCount();
      }/**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      @java.lang.Override
      public com.google.protobuf.DescriptorProtos.FileDescriptorProto getProtoFile(int index) {
        return instance.getProtoFile(index);
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder setProtoFile(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.setProtoFile(index, value);
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder setProtoFile(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.setProtoFile(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder addProtoFile(com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.addProtoFile(value);
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder addProtoFile(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.addProtoFile(index, value);
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder addProtoFile(
          com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addProtoFile(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder addProtoFile(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addProtoFile(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder addAllProtoFile(
          java.lang.Iterable<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProto> values) {
        copyOnWrite();
        instance.addAllProtoFile(values);
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder clearProtoFile() {
        copyOnWrite();
        instance.clearProtoFile();
        return this;
      }
      /**
       * <pre>
       * FileDescriptorProtos for all files in files_to_generate and everything
       * they import.  The files will appear in topological order, so each file
       * appears before any file that imports it.
       * Note: the files listed in files_to_generate will include runtime-retention
       * options only, but all other files will include source-retention options.
       * The source_file_descriptors field below is available in case you need
       * source-retention options for files_to_generate.
       * protoc guarantees that all proto_files will be written after
       * the fields above, even though this is not technically guaranteed by the
       * protobuf wire format.  This theoretically could allow a plugin to stream
       * in the FileDescriptorProtos and handle them one by one rather than read
       * the entire set into memory at once.  However, as of this writing, this
       * is not similarly optimized on protoc's end -- it will store all fields in
       * memory at once before sending them to the plugin.
       * Type names of fields and extensions in the FileDescriptorProto are always
       * fully qualified.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto proto_file = 15;</code>
       */
      public Builder removeProtoFile(int index) {
        copyOnWrite();
        instance.removeProtoFile(index);
        return this;
      }

      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.DescriptorProtos.FileDescriptorProto> getSourceFileDescriptorsList() {
        return java.util.Collections.unmodifiableList(
            instance.getSourceFileDescriptorsList());
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      @java.lang.Override
      public int getSourceFileDescriptorsCount() {
        return instance.getSourceFileDescriptorsCount();
      }/**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      @java.lang.Override
      public com.google.protobuf.DescriptorProtos.FileDescriptorProto getSourceFileDescriptors(int index) {
        return instance.getSourceFileDescriptors(index);
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder setSourceFileDescriptors(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.setSourceFileDescriptors(index, value);
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder setSourceFileDescriptors(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.setSourceFileDescriptors(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder addSourceFileDescriptors(com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.addSourceFileDescriptors(value);
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder addSourceFileDescriptors(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto value) {
        copyOnWrite();
        instance.addSourceFileDescriptors(index, value);
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder addSourceFileDescriptors(
          com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addSourceFileDescriptors(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder addSourceFileDescriptors(
          int index, com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builderForValue) {
        copyOnWrite();
        instance.addSourceFileDescriptors(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder addAllSourceFileDescriptors(
          java.lang.Iterable<? extends com.google.protobuf.DescriptorProtos.FileDescriptorProto> values) {
        copyOnWrite();
        instance.addAllSourceFileDescriptors(values);
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder clearSourceFileDescriptors() {
        copyOnWrite();
        instance.clearSourceFileDescriptors();
        return this;
      }
      /**
       * <pre>
       * File descriptors with all options, including source-retention options.
       * These descriptors are only provided for the files listed in
       * files_to_generate.
       * </pre>
       *
       * <code>repeated .google.protobuf.FileDescriptorProto source_file_descriptors = 17;</code>
       */
      public Builder removeSourceFileDescriptors(int index) {
        copyOnWrite();
        instance.removeSourceFileDescriptors(index);
        return this;
      }

      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      @java.lang.Override
      public boolean hasCompilerVersion() {
        return instance.hasCompilerVersion();
      }
      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      @java.lang.Override
      public com.google.protobuf.compiler.PluginProtos.Version getCompilerVersion() {
        return instance.getCompilerVersion();
      }
      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      public Builder setCompilerVersion(com.google.protobuf.compiler.PluginProtos.Version value) {
        copyOnWrite();
        instance.setCompilerVersion(value);
        return this;
        }
      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      public Builder setCompilerVersion(
          com.google.protobuf.compiler.PluginProtos.Version.Builder builderForValue) {
        copyOnWrite();
        instance.setCompilerVersion(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      public Builder mergeCompilerVersion(com.google.protobuf.compiler.PluginProtos.Version value) {
        copyOnWrite();
        instance.mergeCompilerVersion(value);
        return this;
      }
      /**
       * <pre>
       * The version number of protocol compiler.
       * </pre>
       *
       * <code>optional .google.protobuf.compiler.Version compiler_version = 3;</code>
       */
      public Builder clearCompilerVersion() {  copyOnWrite();
        instance.clearCompilerVersion();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorRequest)
    }
    private byte memoizedIsInitialized = 2;
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "fileToGenerate_",
              "parameter_",
              "compilerVersion_",
              "protoFile_",
              com.google.protobuf.DescriptorProtos.FileDescriptorProto.class,
              "sourceFileDescriptors_",
              com.google.protobuf.DescriptorProtos.FileDescriptorProto.class,
            };
            java.lang.String info =
                "\u0001\u0005\u0000\u0001\u0001\u0011\u0005\u0000\u0003\u0002\u0001\u001a\u0002\u1008" +
                "\u0000\u0003\u1009\u0001\u000f\u041b\u0011\u041b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return memoizedIsInitialized;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        memoizedIsInitialized = (byte) (arg0 == null ? 0 : 1);
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorRequest)
    private static final com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest DEFAULT_INSTANCE;
    static {
      CodeGeneratorRequest defaultInstance = new CodeGeneratorRequest();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CodeGeneratorRequest.class, defaultInstance);
    }

    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CodeGeneratorRequest> PARSER;

    public static com.google.protobuf.Parser<CodeGeneratorRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CodeGeneratorResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return Whether the error field is set.
     */
    boolean hasError();
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return The error.
     */
    java.lang.String getError();
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return The bytes for error.
     */
    com.google.protobuf.ByteString
        getErrorBytes();

    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     * @return Whether the supportedFeatures field is set.
     */
    boolean hasSupportedFeatures();
    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     * @return The supportedFeatures.
     */
    long getSupportedFeatures();

    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    java.util.List<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> 
        getFileList();
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File getFile(int index);
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    int getFileCount();
  }
  /**
   * <pre>
   * The plugin writes an encoded CodeGeneratorResponse to stdout.
   * </pre>
   *
   * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse}
   */
  public  static final class CodeGeneratorResponse extends
      com.google.protobuf.GeneratedMessageLite<
          CodeGeneratorResponse, CodeGeneratorResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorResponse)
      CodeGeneratorResponseOrBuilder {
    private CodeGeneratorResponse() {
      error_ = "";
      file_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Sync with code_generator.h.
     * </pre>
     *
     * Protobuf enum {@code google.protobuf.compiler.CodeGeneratorResponse.Feature}
     */
    public enum Feature
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>FEATURE_NONE = 0;</code>
       */
      FEATURE_NONE(0),
      /**
       * <code>FEATURE_PROTO3_OPTIONAL = 1;</code>
       */
      FEATURE_PROTO3_OPTIONAL(1),
      /**
       * <code>FEATURE_SUPPORTS_EDITIONS = 2;</code>
       */
      FEATURE_SUPPORTS_EDITIONS(2),
      ;

      /**
       * <code>FEATURE_NONE = 0;</code>
       */
      public static final int FEATURE_NONE_VALUE = 0;
      /**
       * <code>FEATURE_PROTO3_OPTIONAL = 1;</code>
       */
      public static final int FEATURE_PROTO3_OPTIONAL_VALUE = 1;
      /**
       * <code>FEATURE_SUPPORTS_EDITIONS = 2;</code>
       */
      public static final int FEATURE_SUPPORTS_EDITIONS_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Feature valueOf(int value) {
        return forNumber(value);
      }

      public static Feature forNumber(int value) {
        switch (value) {
          case 0: return FEATURE_NONE;
          case 1: return FEATURE_PROTO3_OPTIONAL;
          case 2: return FEATURE_SUPPORTS_EDITIONS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Feature>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Feature> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Feature>() {
              @java.lang.Override
              public Feature findValueByNumber(int number) {
                return Feature.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return FeatureVerifier.INSTANCE;
      }

      private static final class FeatureVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new FeatureVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Feature.forNumber(number) != null;
              }
            };

      private final int value;

      private Feature(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:google.protobuf.compiler.CodeGeneratorResponse.Feature)
    }

    public interface FileOrBuilder extends
        // @@protoc_insertion_point(interface_extends:google.protobuf.compiler.CodeGeneratorResponse.File)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      boolean hasName();
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return Whether the insertionPoint field is set.
       */
      boolean hasInsertionPoint();
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return The insertionPoint.
       */
      java.lang.String getInsertionPoint();
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return The bytes for insertionPoint.
       */
      com.google.protobuf.ByteString
          getInsertionPointBytes();

      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return Whether the content field is set.
       */
      boolean hasContent();
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return The content.
       */
      java.lang.String getContent();
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return The bytes for content.
       */
      com.google.protobuf.ByteString
          getContentBytes();

      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       * @return Whether the generatedCodeInfo field is set.
       */
      boolean hasGeneratedCodeInfo();
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       * @return The generatedCodeInfo.
       */
      com.google.protobuf.DescriptorProtos.GeneratedCodeInfo getGeneratedCodeInfo();
    }
    /**
     * <pre>
     * Represents a single generated file.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse.File}
     */
    public  static final class File extends
        com.google.protobuf.GeneratedMessageLite<
            File, File.Builder> implements
        // @@protoc_insertion_point(message_implements:google.protobuf.compiler.CodeGeneratorResponse.File)
        FileOrBuilder {
      private File() {
        name_ = "";
        insertionPoint_ = "";
        content_ = "";
      }
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.String name_;
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return Whether the name field is set.
       */
      @java.lang.Override
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        return name_;
      }
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(name_);
      }
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The name to set.
       */
      private void setName(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000001;
        name_ = value;
      }
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       */
      private void clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
      }
      /**
       * <pre>
       * The file name, relative to the output directory.  The name must not
       * contain "." or ".." components and must be relative, not be absolute (so,
       * the file cannot lie outside the output directory).  "/" must be used as
       * the path separator, not "&#92;".
       * If the name is omitted, the content will be appended to the previous
       * file.  This allows the generator to break large files into small chunks,
       * and allows the generated text to be streamed back to protoc so that large
       * files need not reside completely in memory at one time.  Note that as of
       * this writing protoc does not optimize for this -- it will read the entire
       * CodeGeneratorResponse before writing files to disk.
       * </pre>
       *
       * <code>optional string name = 1;</code>
       * @param value The bytes for name to set.
       */
      private void setNameBytes(
          com.google.protobuf.ByteString value) {
        name_ = value.toStringUtf8();
        bitField0_ |= 0x00000001;
      }

      public static final int INSERTION_POINT_FIELD_NUMBER = 2;
      private java.lang.String insertionPoint_;
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return Whether the insertionPoint field is set.
       */
      @java.lang.Override
      public boolean hasInsertionPoint() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return The insertionPoint.
       */
      @java.lang.Override
      public java.lang.String getInsertionPoint() {
        return insertionPoint_;
      }
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @return The bytes for insertionPoint.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getInsertionPointBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(insertionPoint_);
      }
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @param value The insertionPoint to set.
       */
      private void setInsertionPoint(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000002;
        insertionPoint_ = value;
      }
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       */
      private void clearInsertionPoint() {
        bitField0_ = (bitField0_ & ~0x00000002);
        insertionPoint_ = getDefaultInstance().getInsertionPoint();
      }
      /**
       * <pre>
       * If non-empty, indicates that the named file should already exist, and the
       * content here is to be inserted into that file at a defined insertion
       * point.  This feature allows a code generator to extend the output
       * produced by another code generator.  The original generator may provide
       * insertion points by placing special annotations in the file that look
       * like:
       *   &#64;&#64;protoc_insertion_point(NAME)
       * The annotation can have arbitrary text before and after it on the line,
       * which allows it to be placed in a comment.  NAME should be replaced with
       * an identifier naming the point -- this is what other generators will use
       * as the insertion_point.  Code inserted at this point will be placed
       * immediately above the line containing the insertion point (thus multiple
       * insertions to the same point will come out in the order they were added).
       * The double-&#64; is intended to make it unlikely that the generated code
       * could contain things that look like insertion points by accident.
       * For example, the C++ code generator places the following line in the
       * .pb.h files that it generates:
       *   // &#64;&#64;protoc_insertion_point(namespace_scope)
       * This line appears within the scope of the file's package namespace, but
       * outside of any particular class.  Another plugin can then specify the
       * insertion_point "namespace_scope" to generate additional classes or
       * other declarations that should be placed in this scope.
       * Note that if the line containing the insertion point begins with
       * whitespace, the same whitespace will be added to every line of the
       * inserted text.  This is useful for languages like Python, where
       * indentation matters.  In these languages, the insertion point comment
       * should be indented the same amount as any inserted code will need to be
       * in order to work correctly in that context.
       * The code generator that generates the initial file and the one which
       * inserts into it must both run as part of a single invocation of protoc.
       * Code generators are executed in the order in which they appear on the
       * command line.
       * If |insertion_point| is present, |name| must also be present.
       * </pre>
       *
       * <code>optional string insertion_point = 2;</code>
       * @param value The bytes for insertionPoint to set.
       */
      private void setInsertionPointBytes(
          com.google.protobuf.ByteString value) {
        insertionPoint_ = value.toStringUtf8();
        bitField0_ |= 0x00000002;
      }

      public static final int CONTENT_FIELD_NUMBER = 15;
      private java.lang.String content_;
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return Whether the content field is set.
       */
      @java.lang.Override
      public boolean hasContent() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return The content.
       */
      @java.lang.Override
      public java.lang.String getContent() {
        return content_;
      }
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @return The bytes for content.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getContentBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(content_);
      }
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @param value The content to set.
       */
      private void setContent(
          java.lang.String value) {
        java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000004;
        content_ = value;
      }
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       */
      private void clearContent() {
        bitField0_ = (bitField0_ & ~0x00000004);
        content_ = getDefaultInstance().getContent();
      }
      /**
       * <pre>
       * The file contents.
       * </pre>
       *
       * <code>optional string content = 15;</code>
       * @param value The bytes for content to set.
       */
      private void setContentBytes(
          com.google.protobuf.ByteString value) {
        content_ = value.toStringUtf8();
        bitField0_ |= 0x00000004;
      }

      public static final int GENERATED_CODE_INFO_FIELD_NUMBER = 16;
      private com.google.protobuf.DescriptorProtos.GeneratedCodeInfo generatedCodeInfo_;
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       */
      @java.lang.Override
      public boolean hasGeneratedCodeInfo() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       */
      @java.lang.Override
      public com.google.protobuf.DescriptorProtos.GeneratedCodeInfo getGeneratedCodeInfo() {
        return generatedCodeInfo_ == null ? com.google.protobuf.DescriptorProtos.GeneratedCodeInfo.getDefaultInstance() : generatedCodeInfo_;
      }
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       */
      private void setGeneratedCodeInfo(com.google.protobuf.DescriptorProtos.GeneratedCodeInfo value) {
        value.getClass();
  generatedCodeInfo_ = value;
        bitField0_ |= 0x00000008;
        }
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeGeneratedCodeInfo(com.google.protobuf.DescriptorProtos.GeneratedCodeInfo value) {
        value.getClass();
  if (generatedCodeInfo_ != null &&
            generatedCodeInfo_ != com.google.protobuf.DescriptorProtos.GeneratedCodeInfo.getDefaultInstance()) {
          generatedCodeInfo_ =
            com.google.protobuf.DescriptorProtos.GeneratedCodeInfo.newBuilder(generatedCodeInfo_).mergeFrom(value).buildPartial();
        } else {
          generatedCodeInfo_ = value;
        }
        bitField0_ |= 0x00000008;
      }
      /**
       * <pre>
       * Information describing the file content being inserted. If an insertion
       * point is used, this information will be appropriately offset and inserted
       * into the code generation metadata for the generated files.
       * </pre>
       *
       * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
       */
      private void clearGeneratedCodeInfo() {  generatedCodeInfo_ = null;
        bitField0_ = (bitField0_ & ~0x00000008);
      }

      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * Represents a single generated file.
       * </pre>
       *
       * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse.File}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File, Builder> implements
          // @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorResponse.File)
          com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.FileOrBuilder {
        // Construct using com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return Whether the name field is set.
         */
        @java.lang.Override
        public boolean hasName() {
          return instance.hasName();
        }
        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The name.
         */
        @java.lang.Override
        public java.lang.String getName() {
          return instance.getName();
        }
        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return The bytes for name.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getNameBytes() {
          return instance.getNameBytes();
        }
        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          copyOnWrite();
          instance.setName(value);
          return this;
        }
        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          copyOnWrite();
          instance.clearName();
          return this;
        }
        /**
         * <pre>
         * The file name, relative to the output directory.  The name must not
         * contain "." or ".." components and must be relative, not be absolute (so,
         * the file cannot lie outside the output directory).  "/" must be used as
         * the path separator, not "&#92;".
         * If the name is omitted, the content will be appended to the previous
         * file.  This allows the generator to break large files into small chunks,
         * and allows the generated text to be streamed back to protoc so that large
         * files need not reside completely in memory at one time.  Note that as of
         * this writing protoc does not optimize for this -- it will read the entire
         * CodeGeneratorResponse before writing files to disk.
         * </pre>
         *
         * <code>optional string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setNameBytes(value);
          return this;
        }

        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @return Whether the insertionPoint field is set.
         */
        @java.lang.Override
        public boolean hasInsertionPoint() {
          return instance.hasInsertionPoint();
        }
        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @return The insertionPoint.
         */
        @java.lang.Override
        public java.lang.String getInsertionPoint() {
          return instance.getInsertionPoint();
        }
        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @return The bytes for insertionPoint.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getInsertionPointBytes() {
          return instance.getInsertionPointBytes();
        }
        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @param value The insertionPoint to set.
         * @return This builder for chaining.
         */
        public Builder setInsertionPoint(
            java.lang.String value) {
          copyOnWrite();
          instance.setInsertionPoint(value);
          return this;
        }
        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearInsertionPoint() {
          copyOnWrite();
          instance.clearInsertionPoint();
          return this;
        }
        /**
         * <pre>
         * If non-empty, indicates that the named file should already exist, and the
         * content here is to be inserted into that file at a defined insertion
         * point.  This feature allows a code generator to extend the output
         * produced by another code generator.  The original generator may provide
         * insertion points by placing special annotations in the file that look
         * like:
         *   &#64;&#64;protoc_insertion_point(NAME)
         * The annotation can have arbitrary text before and after it on the line,
         * which allows it to be placed in a comment.  NAME should be replaced with
         * an identifier naming the point -- this is what other generators will use
         * as the insertion_point.  Code inserted at this point will be placed
         * immediately above the line containing the insertion point (thus multiple
         * insertions to the same point will come out in the order they were added).
         * The double-&#64; is intended to make it unlikely that the generated code
         * could contain things that look like insertion points by accident.
         * For example, the C++ code generator places the following line in the
         * .pb.h files that it generates:
         *   // &#64;&#64;protoc_insertion_point(namespace_scope)
         * This line appears within the scope of the file's package namespace, but
         * outside of any particular class.  Another plugin can then specify the
         * insertion_point "namespace_scope" to generate additional classes or
         * other declarations that should be placed in this scope.
         * Note that if the line containing the insertion point begins with
         * whitespace, the same whitespace will be added to every line of the
         * inserted text.  This is useful for languages like Python, where
         * indentation matters.  In these languages, the insertion point comment
         * should be indented the same amount as any inserted code will need to be
         * in order to work correctly in that context.
         * The code generator that generates the initial file and the one which
         * inserts into it must both run as part of a single invocation of protoc.
         * Code generators are executed in the order in which they appear on the
         * command line.
         * If |insertion_point| is present, |name| must also be present.
         * </pre>
         *
         * <code>optional string insertion_point = 2;</code>
         * @param value The bytes for insertionPoint to set.
         * @return This builder for chaining.
         */
        public Builder setInsertionPointBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setInsertionPointBytes(value);
          return this;
        }

        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @return Whether the content field is set.
         */
        @java.lang.Override
        public boolean hasContent() {
          return instance.hasContent();
        }
        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @return The content.
         */
        @java.lang.Override
        public java.lang.String getContent() {
          return instance.getContent();
        }
        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @return The bytes for content.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getContentBytes() {
          return instance.getContentBytes();
        }
        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @param value The content to set.
         * @return This builder for chaining.
         */
        public Builder setContent(
            java.lang.String value) {
          copyOnWrite();
          instance.setContent(value);
          return this;
        }
        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearContent() {
          copyOnWrite();
          instance.clearContent();
          return this;
        }
        /**
         * <pre>
         * The file contents.
         * </pre>
         *
         * <code>optional string content = 15;</code>
         * @param value The bytes for content to set.
         * @return This builder for chaining.
         */
        public Builder setContentBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setContentBytes(value);
          return this;
        }

        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        @java.lang.Override
        public boolean hasGeneratedCodeInfo() {
          return instance.hasGeneratedCodeInfo();
        }
        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        @java.lang.Override
        public com.google.protobuf.DescriptorProtos.GeneratedCodeInfo getGeneratedCodeInfo() {
          return instance.getGeneratedCodeInfo();
        }
        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        public Builder setGeneratedCodeInfo(com.google.protobuf.DescriptorProtos.GeneratedCodeInfo value) {
          copyOnWrite();
          instance.setGeneratedCodeInfo(value);
          return this;
          }
        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        public Builder setGeneratedCodeInfo(
            com.google.protobuf.DescriptorProtos.GeneratedCodeInfo.Builder builderForValue) {
          copyOnWrite();
          instance.setGeneratedCodeInfo(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        public Builder mergeGeneratedCodeInfo(com.google.protobuf.DescriptorProtos.GeneratedCodeInfo value) {
          copyOnWrite();
          instance.mergeGeneratedCodeInfo(value);
          return this;
        }
        /**
         * <pre>
         * Information describing the file content being inserted. If an insertion
         * point is used, this information will be appropriately offset and inserted
         * into the code generation metadata for the generated files.
         * </pre>
         *
         * <code>optional .google.protobuf.GeneratedCodeInfo generated_code_info = 16;</code>
         */
        public Builder clearGeneratedCodeInfo() {  copyOnWrite();
          instance.clearGeneratedCodeInfo();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorResponse.File)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "bitField0_",
                "name_",
                "insertionPoint_",
                "content_",
                "generatedCodeInfo_",
              };
              java.lang.String info =
                  "\u0001\u0004\u0000\u0001\u0001\u0010\u0004\u0000\u0000\u0000\u0001\u1008\u0000\u0002" +
                  "\u1008\u0001\u000f\u1008\u0002\u0010\u1009\u0003";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> parser = PARSER;
            if (parser == null) {
              synchronized (com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorResponse.File)
      private static final com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File DEFAULT_INSTANCE;
      static {
        File defaultInstance = new File();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          File.class, defaultInstance);
      }

      public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<File> PARSER;

      public static com.google.protobuf.Parser<File> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int ERROR_FIELD_NUMBER = 1;
    private java.lang.String error_;
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return Whether the error field is set.
     */
    @java.lang.Override
    public boolean hasError() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return The error.
     */
    @java.lang.Override
    public java.lang.String getError() {
      return error_;
    }
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @return The bytes for error.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(error_);
    }
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @param value The error to set.
     */
    private void setError(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  bitField0_ |= 0x00000001;
      error_ = value;
    }
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     */
    private void clearError() {
      bitField0_ = (bitField0_ & ~0x00000001);
      error_ = getDefaultInstance().getError();
    }
    /**
     * <pre>
     * Error message.  If non-empty, code generation failed.  The plugin process
     * should exit with status code zero even if it reports an error in this way.
     * This should be used to indicate errors in .proto files which prevent the
     * code generator from generating correct code.  Errors which indicate a
     * problem in protoc itself -- such as the input CodeGeneratorRequest being
     * unparseable -- should be reported by writing a message to stderr and
     * exiting with a non-zero status code.
     * </pre>
     *
     * <code>optional string error = 1;</code>
     * @param value The bytes for error to set.
     */
    private void setErrorBytes(
        com.google.protobuf.ByteString value) {
      error_ = value.toStringUtf8();
      bitField0_ |= 0x00000001;
    }

    public static final int SUPPORTED_FEATURES_FIELD_NUMBER = 2;
    private long supportedFeatures_;
    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     * @return Whether the supportedFeatures field is set.
     */
    @java.lang.Override
    public boolean hasSupportedFeatures() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     * @return The supportedFeatures.
     */
    @java.lang.Override
    public long getSupportedFeatures() {
      return supportedFeatures_;
    }
    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     * @param value The supportedFeatures to set.
     */
    private void setSupportedFeatures(long value) {
      bitField0_ |= 0x00000002;
      supportedFeatures_ = value;
    }
    /**
     * <pre>
     * A bitmask of supported features that the code generator supports.
     * This is a bitwise "or" of values from the Feature enum.
     * </pre>
     *
     * <code>optional uint64 supported_features = 2;</code>
     */
    private void clearSupportedFeatures() {
      bitField0_ = (bitField0_ & ~0x00000002);
      supportedFeatures_ = 0L;
    }

    public static final int FILE_FIELD_NUMBER = 15;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> file_;
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> getFileList() {
      return file_;
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    public java.util.List<? extends com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.FileOrBuilder> 
        getFileOrBuilderList() {
      return file_;
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    @java.lang.Override
    public int getFileCount() {
      return file_.size();
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    @java.lang.Override
    public com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File getFile(int index) {
      return file_.get(index);
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    public com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.FileOrBuilder getFileOrBuilder(
        int index) {
      return file_.get(index);
    }
    private void ensureFileIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> tmp = file_;
      if (!tmp.isModifiable()) {
        file_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void setFile(
        int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
      value.getClass();
  ensureFileIsMutable();
      file_.set(index, value);
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void addFile(com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
      value.getClass();
  ensureFileIsMutable();
      file_.add(value);
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void addFile(
        int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
      value.getClass();
  ensureFileIsMutable();
      file_.add(index, value);
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void addAllFile(
        java.lang.Iterable<? extends com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> values) {
      ensureFileIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, file_);
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void clearFile() {
      file_ = emptyProtobufList();
    }
    /**
     * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
     */
    private void removeFile(int index) {
      ensureFileIsMutable();
      file_.remove(index);
    }

    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * The plugin writes an encoded CodeGeneratorResponse to stdout.
     * </pre>
     *
     * Protobuf type {@code google.protobuf.compiler.CodeGeneratorResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:google.protobuf.compiler.CodeGeneratorResponse)
        com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponseOrBuilder {
      // Construct using com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @return Whether the error field is set.
       */
      @java.lang.Override
      public boolean hasError() {
        return instance.hasError();
      }
      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @return The error.
       */
      @java.lang.Override
      public java.lang.String getError() {
        return instance.getError();
      }
      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @return The bytes for error.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getErrorBytes() {
        return instance.getErrorBytes();
      }
      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setError(
          java.lang.String value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }
      /**
       * <pre>
       * Error message.  If non-empty, code generation failed.  The plugin process
       * should exit with status code zero even if it reports an error in this way.
       * This should be used to indicate errors in .proto files which prevent the
       * code generator from generating correct code.  Errors which indicate a
       * problem in protoc itself -- such as the input CodeGeneratorRequest being
       * unparseable -- should be reported by writing a message to stderr and
       * exiting with a non-zero status code.
       * </pre>
       *
       * <code>optional string error = 1;</code>
       * @param value The bytes for error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setErrorBytes(value);
        return this;
      }

      /**
       * <pre>
       * A bitmask of supported features that the code generator supports.
       * This is a bitwise "or" of values from the Feature enum.
       * </pre>
       *
       * <code>optional uint64 supported_features = 2;</code>
       * @return Whether the supportedFeatures field is set.
       */
      @java.lang.Override
      public boolean hasSupportedFeatures() {
        return instance.hasSupportedFeatures();
      }
      /**
       * <pre>
       * A bitmask of supported features that the code generator supports.
       * This is a bitwise "or" of values from the Feature enum.
       * </pre>
       *
       * <code>optional uint64 supported_features = 2;</code>
       * @return The supportedFeatures.
       */
      @java.lang.Override
      public long getSupportedFeatures() {
        return instance.getSupportedFeatures();
      }
      /**
       * <pre>
       * A bitmask of supported features that the code generator supports.
       * This is a bitwise "or" of values from the Feature enum.
       * </pre>
       *
       * <code>optional uint64 supported_features = 2;</code>
       * @param value The supportedFeatures to set.
       * @return This builder for chaining.
       */
      public Builder setSupportedFeatures(long value) {
        copyOnWrite();
        instance.setSupportedFeatures(value);
        return this;
      }
      /**
       * <pre>
       * A bitmask of supported features that the code generator supports.
       * This is a bitwise "or" of values from the Feature enum.
       * </pre>
       *
       * <code>optional uint64 supported_features = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSupportedFeatures() {
        copyOnWrite();
        instance.clearSupportedFeatures();
        return this;
      }

      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> getFileList() {
        return java.util.Collections.unmodifiableList(
            instance.getFileList());
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      @java.lang.Override
      public int getFileCount() {
        return instance.getFileCount();
      }/**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      @java.lang.Override
      public com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File getFile(int index) {
        return instance.getFile(index);
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder setFile(
          int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
        copyOnWrite();
        instance.setFile(index, value);
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder setFile(
          int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.Builder builderForValue) {
        copyOnWrite();
        instance.setFile(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder addFile(com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
        copyOnWrite();
        instance.addFile(value);
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder addFile(
          int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File value) {
        copyOnWrite();
        instance.addFile(index, value);
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder addFile(
          com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.Builder builderForValue) {
        copyOnWrite();
        instance.addFile(builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder addFile(
          int index, com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.Builder builderForValue) {
        copyOnWrite();
        instance.addFile(index,
            builderForValue.build());
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder addAllFile(
          java.lang.Iterable<? extends com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File> values) {
        copyOnWrite();
        instance.addAllFile(values);
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder clearFile() {
        copyOnWrite();
        instance.clearFile();
        return this;
      }
      /**
       * <code>repeated .google.protobuf.compiler.CodeGeneratorResponse.File file = 15;</code>
       */
      public Builder removeFile(int index) {
        copyOnWrite();
        instance.removeFile(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:google.protobuf.compiler.CodeGeneratorResponse)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "bitField0_",
              "error_",
              "supportedFeatures_",
              "file_",
              com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File.class,
            };
            java.lang.String info =
                "\u0001\u0003\u0000\u0001\u0001\u000f\u0003\u0000\u0001\u0000\u0001\u1008\u0000\u0002" +
                "\u1003\u0001\u000f\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:google.protobuf.compiler.CodeGeneratorResponse)
    private static final com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse DEFAULT_INSTANCE;
    static {
      CodeGeneratorResponse defaultInstance = new CodeGeneratorResponse();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        CodeGeneratorResponse.class, defaultInstance);
    }

    public static com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CodeGeneratorResponse> PARSER;

    public static com.google.protobuf.Parser<CodeGeneratorResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

package com.google.api;

/**
 * <pre>
 * `QuotaLimit` defines a specific limit that applies over a specified duration
 * for a limit type. There can be at most one limit for a duration and limit
 * type combination defined within a `QuotaGroup`.
 * </pre>
 *
 * Protobuf type {@code google.api.QuotaLimit}
 */
public  final class QuotaLimit extends
    com.google.protobuf.GeneratedMessageLite<
        QuotaLimit, QuotaLimit.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.QuotaLimit)
    QuotaLimitOrBuilder {
  private QuotaLimit() {
    name_ = "";
    description_ = "";
    duration_ = "";
    metric_ = "";
    unit_ = "";
    displayName_ = "";
  }
  public static final int NAME_FIELD_NUMBER = 6;
  private java.lang.String name_;
  /**
   * <pre>
   * Name of the quota limit. The name is used to refer to the limit when
   * overriding the default limit on per-consumer basis.
   * For group-based quota limits, the name must be unique within the quota
   * group. If a name is not provided, it will be generated from the limit_by
   * and duration fields.
   * For metric-based quota limits, the name must be provided, and it must be
   * unique within the service. The name can only include alphanumeric
   * characters as well as '-'.
   * The maximum length of the limit name is 64 characters.
   * The name of a limit is used as a unique identifier for this limit.
   * Therefore, once a limit has been put into use, its name should be
   * immutable. You can use the display_name field to provide a user-friendly
   * name for the limit. The display name can be evolved over time without
   * affecting the identity of the limit.
   * </pre>
   *
   * <code>string name = 6;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * Name of the quota limit. The name is used to refer to the limit when
   * overriding the default limit on per-consumer basis.
   * For group-based quota limits, the name must be unique within the quota
   * group. If a name is not provided, it will be generated from the limit_by
   * and duration fields.
   * For metric-based quota limits, the name must be provided, and it must be
   * unique within the service. The name can only include alphanumeric
   * characters as well as '-'.
   * The maximum length of the limit name is 64 characters.
   * The name of a limit is used as a unique identifier for this limit.
   * Therefore, once a limit has been put into use, its name should be
   * immutable. You can use the display_name field to provide a user-friendly
   * name for the limit. The display name can be evolved over time without
   * affecting the identity of the limit.
   * </pre>
   *
   * <code>string name = 6;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * Name of the quota limit. The name is used to refer to the limit when
   * overriding the default limit on per-consumer basis.
   * For group-based quota limits, the name must be unique within the quota
   * group. If a name is not provided, it will be generated from the limit_by
   * and duration fields.
   * For metric-based quota limits, the name must be provided, and it must be
   * unique within the service. The name can only include alphanumeric
   * characters as well as '-'.
   * The maximum length of the limit name is 64 characters.
   * The name of a limit is used as a unique identifier for this limit.
   * Therefore, once a limit has been put into use, its name should be
   * immutable. You can use the display_name field to provide a user-friendly
   * name for the limit. The display name can be evolved over time without
   * affecting the identity of the limit.
   * </pre>
   *
   * <code>string name = 6;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * Name of the quota limit. The name is used to refer to the limit when
   * overriding the default limit on per-consumer basis.
   * For group-based quota limits, the name must be unique within the quota
   * group. If a name is not provided, it will be generated from the limit_by
   * and duration fields.
   * For metric-based quota limits, the name must be provided, and it must be
   * unique within the service. The name can only include alphanumeric
   * characters as well as '-'.
   * The maximum length of the limit name is 64 characters.
   * The name of a limit is used as a unique identifier for this limit.
   * Therefore, once a limit has been put into use, its name should be
   * immutable. You can use the display_name field to provide a user-friendly
   * name for the limit. The display name can be evolved over time without
   * affecting the identity of the limit.
   * </pre>
   *
   * <code>string name = 6;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * Name of the quota limit. The name is used to refer to the limit when
   * overriding the default limit on per-consumer basis.
   * For group-based quota limits, the name must be unique within the quota
   * group. If a name is not provided, it will be generated from the limit_by
   * and duration fields.
   * For metric-based quota limits, the name must be provided, and it must be
   * unique within the service. The name can only include alphanumeric
   * characters as well as '-'.
   * The maximum length of the limit name is 64 characters.
   * The name of a limit is used as a unique identifier for this limit.
   * Therefore, once a limit has been put into use, its name should be
   * immutable. You can use the display_name field to provide a user-friendly
   * name for the limit. The display name can be evolved over time without
   * affecting the identity of the limit.
   * </pre>
   *
   * <code>string name = 6;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  private java.lang.String description_;
  /**
   * <pre>
   * Optional. User-visible, extended description for this quota limit.
   * Should be used only when more context is needed to understand this limit
   * than provided by the limit's display name (see: `display_name`).
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * Optional. User-visible, extended description for this quota limit.
   * Should be used only when more context is needed to understand this limit
   * than provided by the limit's display name (see: `display_name`).
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * Optional. User-visible, extended description for this quota limit.
   * Should be used only when more context is needed to understand this limit
   * than provided by the limit's display name (see: `display_name`).
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The description to set.
   */
  private void setDescription(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    description_ = value;
  }
  /**
   * <pre>
   * Optional. User-visible, extended description for this quota limit.
   * Should be used only when more context is needed to understand this limit
   * than provided by the limit's display name (see: `display_name`).
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * Optional. User-visible, extended description for this quota limit.
   * Should be used only when more context is needed to understand this limit
   * than provided by the limit's display name (see: `display_name`).
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The bytes for description to set.
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    description_ = value.toStringUtf8();
    
  }

  public static final int DEFAULT_LIMIT_FIELD_NUMBER = 3;
  private long defaultLimit_;
  /**
   * <pre>
   * Default number of tokens that can be consumed during the specified
   * duration. This is the number of tokens assigned when a client
   * application developer activates the service for his/her project.
   * Specifying a value of 0 will block all requests. This can be used if you
   * are provisioning quota to selected consumers and blocking others.
   * Similarly, a value of -1 will indicate an unlimited quota. No other
   * negative values are allowed.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 default_limit = 3;</code>
   * @return The defaultLimit.
   */
  @java.lang.Override
  public long getDefaultLimit() {
    return defaultLimit_;
  }
  /**
   * <pre>
   * Default number of tokens that can be consumed during the specified
   * duration. This is the number of tokens assigned when a client
   * application developer activates the service for his/her project.
   * Specifying a value of 0 will block all requests. This can be used if you
   * are provisioning quota to selected consumers and blocking others.
   * Similarly, a value of -1 will indicate an unlimited quota. No other
   * negative values are allowed.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 default_limit = 3;</code>
   * @param value The defaultLimit to set.
   */
  private void setDefaultLimit(long value) {
    
    defaultLimit_ = value;
  }
  /**
   * <pre>
   * Default number of tokens that can be consumed during the specified
   * duration. This is the number of tokens assigned when a client
   * application developer activates the service for his/her project.
   * Specifying a value of 0 will block all requests. This can be used if you
   * are provisioning quota to selected consumers and blocking others.
   * Similarly, a value of -1 will indicate an unlimited quota. No other
   * negative values are allowed.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 default_limit = 3;</code>
   */
  private void clearDefaultLimit() {
    
    defaultLimit_ = 0L;
  }

  public static final int MAX_LIMIT_FIELD_NUMBER = 4;
  private long maxLimit_;
  /**
   * <pre>
   * Maximum number of tokens that can be consumed during the specified
   * duration. Client application developers can override the default limit up
   * to this maximum. If specified, this value cannot be set to a value less
   * than the default limit. If not specified, it is set to the default limit.
   * To allow clients to apply overrides with no upper bound, set this to -1,
   * indicating unlimited maximum quota.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 max_limit = 4;</code>
   * @return The maxLimit.
   */
  @java.lang.Override
  public long getMaxLimit() {
    return maxLimit_;
  }
  /**
   * <pre>
   * Maximum number of tokens that can be consumed during the specified
   * duration. Client application developers can override the default limit up
   * to this maximum. If specified, this value cannot be set to a value less
   * than the default limit. If not specified, it is set to the default limit.
   * To allow clients to apply overrides with no upper bound, set this to -1,
   * indicating unlimited maximum quota.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 max_limit = 4;</code>
   * @param value The maxLimit to set.
   */
  private void setMaxLimit(long value) {
    
    maxLimit_ = value;
  }
  /**
   * <pre>
   * Maximum number of tokens that can be consumed during the specified
   * duration. Client application developers can override the default limit up
   * to this maximum. If specified, this value cannot be set to a value less
   * than the default limit. If not specified, it is set to the default limit.
   * To allow clients to apply overrides with no upper bound, set this to -1,
   * indicating unlimited maximum quota.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 max_limit = 4;</code>
   */
  private void clearMaxLimit() {
    
    maxLimit_ = 0L;
  }

  public static final int FREE_TIER_FIELD_NUMBER = 7;
  private long freeTier_;
  /**
   * <pre>
   * Free tier value displayed in the Developers Console for this limit.
   * The free tier is the number of tokens that will be subtracted from the
   * billed amount when billing is enabled.
   * This field can only be set on a limit with duration "1d", in a billable
   * group; it is invalid on any other limit. If this field is not set, it
   * defaults to 0, indicating that there is no free tier for this service.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 free_tier = 7;</code>
   * @return The freeTier.
   */
  @java.lang.Override
  public long getFreeTier() {
    return freeTier_;
  }
  /**
   * <pre>
   * Free tier value displayed in the Developers Console for this limit.
   * The free tier is the number of tokens that will be subtracted from the
   * billed amount when billing is enabled.
   * This field can only be set on a limit with duration "1d", in a billable
   * group; it is invalid on any other limit. If this field is not set, it
   * defaults to 0, indicating that there is no free tier for this service.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 free_tier = 7;</code>
   * @param value The freeTier to set.
   */
  private void setFreeTier(long value) {
    
    freeTier_ = value;
  }
  /**
   * <pre>
   * Free tier value displayed in the Developers Console for this limit.
   * The free tier is the number of tokens that will be subtracted from the
   * billed amount when billing is enabled.
   * This field can only be set on a limit with duration "1d", in a billable
   * group; it is invalid on any other limit. If this field is not set, it
   * defaults to 0, indicating that there is no free tier for this service.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>int64 free_tier = 7;</code>
   */
  private void clearFreeTier() {
    
    freeTier_ = 0L;
  }

  public static final int DURATION_FIELD_NUMBER = 5;
  private java.lang.String duration_;
  /**
   * <pre>
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
   * For duration longer than a day, only multiple of days is supported. We
   * support only "100s" and "1d" for now. Additional support will be added in
   * the future. "0" indicates indefinite duration.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>string duration = 5;</code>
   * @return The duration.
   */
  @java.lang.Override
  public java.lang.String getDuration() {
    return duration_;
  }
  /**
   * <pre>
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
   * For duration longer than a day, only multiple of days is supported. We
   * support only "100s" and "1d" for now. Additional support will be added in
   * the future. "0" indicates indefinite duration.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>string duration = 5;</code>
   * @return The bytes for duration.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDurationBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(duration_);
  }
  /**
   * <pre>
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
   * For duration longer than a day, only multiple of days is supported. We
   * support only "100s" and "1d" for now. Additional support will be added in
   * the future. "0" indicates indefinite duration.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>string duration = 5;</code>
   * @param value The duration to set.
   */
  private void setDuration(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    duration_ = value;
  }
  /**
   * <pre>
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
   * For duration longer than a day, only multiple of days is supported. We
   * support only "100s" and "1d" for now. Additional support will be added in
   * the future. "0" indicates indefinite duration.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>string duration = 5;</code>
   */
  private void clearDuration() {
    
    duration_ = getDefaultInstance().getDuration();
  }
  /**
   * <pre>
   * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
   * For duration longer than a day, only multiple of days is supported. We
   * support only "100s" and "1d" for now. Additional support will be added in
   * the future. "0" indicates indefinite duration.
   * Used by group-based quotas only.
   * </pre>
   *
   * <code>string duration = 5;</code>
   * @param value The bytes for duration to set.
   */
  private void setDurationBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    duration_ = value.toStringUtf8();
    
  }

  public static final int METRIC_FIELD_NUMBER = 8;
  private java.lang.String metric_;
  /**
   * <pre>
   * The name of the metric this quota limit applies to. The quota limits with
   * the same metric will be checked together during runtime. The metric must be
   * defined within the service config.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string metric = 8;</code>
   * @return The metric.
   */
  @java.lang.Override
  public java.lang.String getMetric() {
    return metric_;
  }
  /**
   * <pre>
   * The name of the metric this quota limit applies to. The quota limits with
   * the same metric will be checked together during runtime. The metric must be
   * defined within the service config.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string metric = 8;</code>
   * @return The bytes for metric.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMetricBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(metric_);
  }
  /**
   * <pre>
   * The name of the metric this quota limit applies to. The quota limits with
   * the same metric will be checked together during runtime. The metric must be
   * defined within the service config.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string metric = 8;</code>
   * @param value The metric to set.
   */
  private void setMetric(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    metric_ = value;
  }
  /**
   * <pre>
   * The name of the metric this quota limit applies to. The quota limits with
   * the same metric will be checked together during runtime. The metric must be
   * defined within the service config.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string metric = 8;</code>
   */
  private void clearMetric() {
    
    metric_ = getDefaultInstance().getMetric();
  }
  /**
   * <pre>
   * The name of the metric this quota limit applies to. The quota limits with
   * the same metric will be checked together during runtime. The metric must be
   * defined within the service config.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string metric = 8;</code>
   * @param value The bytes for metric to set.
   */
  private void setMetricBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    metric_ = value.toStringUtf8();
    
  }

  public static final int UNIT_FIELD_NUMBER = 9;
  private java.lang.String unit_;
  /**
   * <pre>
   * Specify the unit of the quota limit. It uses the same syntax as
   * [Metric.unit][]. The supported unit kinds are determined by the quota
   * backend system.
   * The [Google Service Control](https://cloud.google.com/service-control)
   * supports the following unit components:
   * * One of the time intevals:
   *   * "/min"  for quota every minute.
   *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
   *   * Otherwise the quota won't be reset by time, such as storage limit.
   * * One and only one of the granted containers:
   *   * "/{organization}" quota for an organization.
   *   * "/{project}" quota for a project.
   *   * "/{folder}" quota for a folder.
   *   * "/{resource}" quota for a universal resource.
   * * Zero or more quota segmentation dimension. Not all combos are valid.
   *   * "/{region}" quota for every region. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{zone}" quota for every zone. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{resource}" quota for a resource associated with a project or org.
   * Here are some examples:
   * * "1/min/{project}" for quota per minute per project.
   * * "1/min/{user}" for quota per minute per user.
   * * "1/min/{organization}" for quota per minute per organization.
   * Note: the order of unit components is insignificant.
   * The "1" at the beginning is required to follow the metric unit syntax.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string unit = 9;</code>
   * @return The unit.
   */
  @java.lang.Override
  public java.lang.String getUnit() {
    return unit_;
  }
  /**
   * <pre>
   * Specify the unit of the quota limit. It uses the same syntax as
   * [Metric.unit][]. The supported unit kinds are determined by the quota
   * backend system.
   * The [Google Service Control](https://cloud.google.com/service-control)
   * supports the following unit components:
   * * One of the time intevals:
   *   * "/min"  for quota every minute.
   *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
   *   * Otherwise the quota won't be reset by time, such as storage limit.
   * * One and only one of the granted containers:
   *   * "/{organization}" quota for an organization.
   *   * "/{project}" quota for a project.
   *   * "/{folder}" quota for a folder.
   *   * "/{resource}" quota for a universal resource.
   * * Zero or more quota segmentation dimension. Not all combos are valid.
   *   * "/{region}" quota for every region. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{zone}" quota for every zone. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{resource}" quota for a resource associated with a project or org.
   * Here are some examples:
   * * "1/min/{project}" for quota per minute per project.
   * * "1/min/{user}" for quota per minute per user.
   * * "1/min/{organization}" for quota per minute per organization.
   * Note: the order of unit components is insignificant.
   * The "1" at the beginning is required to follow the metric unit syntax.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string unit = 9;</code>
   * @return The bytes for unit.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUnitBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(unit_);
  }
  /**
   * <pre>
   * Specify the unit of the quota limit. It uses the same syntax as
   * [Metric.unit][]. The supported unit kinds are determined by the quota
   * backend system.
   * The [Google Service Control](https://cloud.google.com/service-control)
   * supports the following unit components:
   * * One of the time intevals:
   *   * "/min"  for quota every minute.
   *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
   *   * Otherwise the quota won't be reset by time, such as storage limit.
   * * One and only one of the granted containers:
   *   * "/{organization}" quota for an organization.
   *   * "/{project}" quota for a project.
   *   * "/{folder}" quota for a folder.
   *   * "/{resource}" quota for a universal resource.
   * * Zero or more quota segmentation dimension. Not all combos are valid.
   *   * "/{region}" quota for every region. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{zone}" quota for every zone. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{resource}" quota for a resource associated with a project or org.
   * Here are some examples:
   * * "1/min/{project}" for quota per minute per project.
   * * "1/min/{user}" for quota per minute per user.
   * * "1/min/{organization}" for quota per minute per organization.
   * Note: the order of unit components is insignificant.
   * The "1" at the beginning is required to follow the metric unit syntax.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string unit = 9;</code>
   * @param value The unit to set.
   */
  private void setUnit(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    unit_ = value;
  }
  /**
   * <pre>
   * Specify the unit of the quota limit. It uses the same syntax as
   * [Metric.unit][]. The supported unit kinds are determined by the quota
   * backend system.
   * The [Google Service Control](https://cloud.google.com/service-control)
   * supports the following unit components:
   * * One of the time intevals:
   *   * "/min"  for quota every minute.
   *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
   *   * Otherwise the quota won't be reset by time, such as storage limit.
   * * One and only one of the granted containers:
   *   * "/{organization}" quota for an organization.
   *   * "/{project}" quota for a project.
   *   * "/{folder}" quota for a folder.
   *   * "/{resource}" quota for a universal resource.
   * * Zero or more quota segmentation dimension. Not all combos are valid.
   *   * "/{region}" quota for every region. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{zone}" quota for every zone. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{resource}" quota for a resource associated with a project or org.
   * Here are some examples:
   * * "1/min/{project}" for quota per minute per project.
   * * "1/min/{user}" for quota per minute per user.
   * * "1/min/{organization}" for quota per minute per organization.
   * Note: the order of unit components is insignificant.
   * The "1" at the beginning is required to follow the metric unit syntax.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string unit = 9;</code>
   */
  private void clearUnit() {
    
    unit_ = getDefaultInstance().getUnit();
  }
  /**
   * <pre>
   * Specify the unit of the quota limit. It uses the same syntax as
   * [Metric.unit][]. The supported unit kinds are determined by the quota
   * backend system.
   * The [Google Service Control](https://cloud.google.com/service-control)
   * supports the following unit components:
   * * One of the time intevals:
   *   * "/min"  for quota every minute.
   *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
   *   * Otherwise the quota won't be reset by time, such as storage limit.
   * * One and only one of the granted containers:
   *   * "/{organization}" quota for an organization.
   *   * "/{project}" quota for a project.
   *   * "/{folder}" quota for a folder.
   *   * "/{resource}" quota for a universal resource.
   * * Zero or more quota segmentation dimension. Not all combos are valid.
   *   * "/{region}" quota for every region. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{zone}" quota for every zone. Not to be used with time intervals.
   *   * Otherwise the resources granted on the target is not segmented.
   *   * "/{resource}" quota for a resource associated with a project or org.
   * Here are some examples:
   * * "1/min/{project}" for quota per minute per project.
   * * "1/min/{user}" for quota per minute per user.
   * * "1/min/{organization}" for quota per minute per organization.
   * Note: the order of unit components is insignificant.
   * The "1" at the beginning is required to follow the metric unit syntax.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>string unit = 9;</code>
   * @param value The bytes for unit to set.
   */
  private void setUnitBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    unit_ = value.toStringUtf8();
    
  }

  public static final int VALUES_FIELD_NUMBER = 10;
  private static final class ValuesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.Long> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.Long>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT64,
                0L);
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.Long> values_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
  internalGetValues() {
    return values_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
  internalGetMutableValues() {
    if (!values_.isMutable()) {
      values_ = values_.mutableCopy();
    }
    return values_;
  }
  @java.lang.Override

  public int getValuesCount() {
    return internalGetValues().size();
  }
  /**
   * <pre>
   * Tiered limit values. Also allows for regional or zone overrides for these
   * values if "/{region}" or "/{zone}" is specified in the unit field.
   * Currently supported tiers from low to high:
   * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
   * To apply different limit values for users according to their tiers, specify
   * the values for the tiers you want to differentiate. For example:
   * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
   * The limit value for each tier is optional except for the tier STANDARD.
   * The limit value for an unspecified tier falls to the value of its next
   * tier towards tier STANDARD. For the above example, the limit value for tier
   * STANDARD is 500.
   * To apply the same limit value for all users, just specify limit value for
   * tier STANDARD. For example: {STANDARD:500}.
   * To apply a regional overide for a tier, add a map entry with key
   * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
   * override, add a map entry with key "&lt;TIER&gt;/{zone}".
   * Further, a wildcard can be used at the end of a zone name in order to
   * specify zone level overrides. For example:
   * LOW: 10, STANDARD: 50, HIGH: 100,
   * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
   * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
   * The regional overrides tier set for each region must be the same as
   * the tier set for default limit values. Same rule applies for zone overrides
   * tier as well.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; values = 10;</code>
   */
  @java.lang.Override

  public boolean containsValues(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    return internalGetValues().containsKey(key);
  }
  /**
   * Use {@link #getValuesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Long> getValues() {
    return getValuesMap();
  }
  /**
   * <pre>
   * Tiered limit values. Also allows for regional or zone overrides for these
   * values if "/{region}" or "/{zone}" is specified in the unit field.
   * Currently supported tiers from low to high:
   * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
   * To apply different limit values for users according to their tiers, specify
   * the values for the tiers you want to differentiate. For example:
   * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
   * The limit value for each tier is optional except for the tier STANDARD.
   * The limit value for an unspecified tier falls to the value of its next
   * tier towards tier STANDARD. For the above example, the limit value for tier
   * STANDARD is 500.
   * To apply the same limit value for all users, just specify limit value for
   * tier STANDARD. For example: {STANDARD:500}.
   * To apply a regional overide for a tier, add a map entry with key
   * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
   * override, add a map entry with key "&lt;TIER&gt;/{zone}".
   * Further, a wildcard can be used at the end of a zone name in order to
   * specify zone level overrides. For example:
   * LOW: 10, STANDARD: 50, HIGH: 100,
   * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
   * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
   * The regional overrides tier set for each region must be the same as
   * the tier set for default limit values. Same rule applies for zone overrides
   * tier as well.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; values = 10;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.Long> getValuesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetValues());
  }
  /**
   * <pre>
   * Tiered limit values. Also allows for regional or zone overrides for these
   * values if "/{region}" or "/{zone}" is specified in the unit field.
   * Currently supported tiers from low to high:
   * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
   * To apply different limit values for users according to their tiers, specify
   * the values for the tiers you want to differentiate. For example:
   * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
   * The limit value for each tier is optional except for the tier STANDARD.
   * The limit value for an unspecified tier falls to the value of its next
   * tier towards tier STANDARD. For the above example, the limit value for tier
   * STANDARD is 500.
   * To apply the same limit value for all users, just specify limit value for
   * tier STANDARD. For example: {STANDARD:500}.
   * To apply a regional overide for a tier, add a map entry with key
   * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
   * override, add a map entry with key "&lt;TIER&gt;/{zone}".
   * Further, a wildcard can be used at the end of a zone name in order to
   * specify zone level overrides. For example:
   * LOW: 10, STANDARD: 50, HIGH: 100,
   * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
   * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
   * The regional overrides tier set for each region must be the same as
   * the tier set for default limit values. Same rule applies for zone overrides
   * tier as well.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; values = 10;</code>
   */
  @java.lang.Override

  public long getValuesOrDefault(
      java.lang.String key,
      long defaultValue) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.Long> map =
        internalGetValues();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Tiered limit values. Also allows for regional or zone overrides for these
   * values if "/{region}" or "/{zone}" is specified in the unit field.
   * Currently supported tiers from low to high:
   * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
   * To apply different limit values for users according to their tiers, specify
   * the values for the tiers you want to differentiate. For example:
   * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
   * The limit value for each tier is optional except for the tier STANDARD.
   * The limit value for an unspecified tier falls to the value of its next
   * tier towards tier STANDARD. For the above example, the limit value for tier
   * STANDARD is 500.
   * To apply the same limit value for all users, just specify limit value for
   * tier STANDARD. For example: {STANDARD:500}.
   * To apply a regional overide for a tier, add a map entry with key
   * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
   * override, add a map entry with key "&lt;TIER&gt;/{zone}".
   * Further, a wildcard can be used at the end of a zone name in order to
   * specify zone level overrides. For example:
   * LOW: 10, STANDARD: 50, HIGH: 100,
   * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
   * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
   * The regional overrides tier set for each region must be the same as
   * the tier set for default limit values. Same rule applies for zone overrides
   * tier as well.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; values = 10;</code>
   */
  @java.lang.Override

  public long getValuesOrThrow(
      java.lang.String key) {
    java.lang.Class<?> keyClass = key.getClass();
    java.util.Map<java.lang.String, java.lang.Long> map =
        internalGetValues();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * Tiered limit values. Also allows for regional or zone overrides for these
   * values if "/{region}" or "/{zone}" is specified in the unit field.
   * Currently supported tiers from low to high:
   * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
   * To apply different limit values for users according to their tiers, specify
   * the values for the tiers you want to differentiate. For example:
   * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
   * The limit value for each tier is optional except for the tier STANDARD.
   * The limit value for an unspecified tier falls to the value of its next
   * tier towards tier STANDARD. For the above example, the limit value for tier
   * STANDARD is 500.
   * To apply the same limit value for all users, just specify limit value for
   * tier STANDARD. For example: {STANDARD:500}.
   * To apply a regional overide for a tier, add a map entry with key
   * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
   * override, add a map entry with key "&lt;TIER&gt;/{zone}".
   * Further, a wildcard can be used at the end of a zone name in order to
   * specify zone level overrides. For example:
   * LOW: 10, STANDARD: 50, HIGH: 100,
   * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
   * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
   * The regional overrides tier set for each region must be the same as
   * the tier set for default limit values. Same rule applies for zone overrides
   * tier as well.
   * Used by metric-based quotas only.
   * </pre>
   *
   * <code>map&lt;string, int64&gt; values = 10;</code>
   */
  private java.util.Map<java.lang.String, java.lang.Long>
  getMutableValuesMap() {
    return internalGetMutableValues();
  }

  public static final int DISPLAY_NAME_FIELD_NUMBER = 12;
  private java.lang.String displayName_;
  /**
   * <pre>
   * User-visible display name for this limit.
   * Optional. If not set, the UI will provide a default display name based on
   * the quota configuration. This field can be used to override the default
   * display name generated from the configuration.
   * </pre>
   *
   * <code>string display_name = 12;</code>
   * @return The displayName.
   */
  @java.lang.Override
  public java.lang.String getDisplayName() {
    return displayName_;
  }
  /**
   * <pre>
   * User-visible display name for this limit.
   * Optional. If not set, the UI will provide a default display name based on
   * the quota configuration. This field can be used to override the default
   * display name generated from the configuration.
   * </pre>
   *
   * <code>string display_name = 12;</code>
   * @return The bytes for displayName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDisplayNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(displayName_);
  }
  /**
   * <pre>
   * User-visible display name for this limit.
   * Optional. If not set, the UI will provide a default display name based on
   * the quota configuration. This field can be used to override the default
   * display name generated from the configuration.
   * </pre>
   *
   * <code>string display_name = 12;</code>
   * @param value The displayName to set.
   */
  private void setDisplayName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    displayName_ = value;
  }
  /**
   * <pre>
   * User-visible display name for this limit.
   * Optional. If not set, the UI will provide a default display name based on
   * the quota configuration. This field can be used to override the default
   * display name generated from the configuration.
   * </pre>
   *
   * <code>string display_name = 12;</code>
   */
  private void clearDisplayName() {
    
    displayName_ = getDefaultInstance().getDisplayName();
  }
  /**
   * <pre>
   * User-visible display name for this limit.
   * Optional. If not set, the UI will provide a default display name based on
   * the quota configuration. This field can be used to override the default
   * display name generated from the configuration.
   * </pre>
   *
   * <code>string display_name = 12;</code>
   * @param value The bytes for displayName to set.
   */
  private void setDisplayNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    displayName_ = value.toStringUtf8();
    
  }

  public static com.google.api.QuotaLimit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.QuotaLimit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.QuotaLimit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.QuotaLimit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.QuotaLimit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.QuotaLimit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.QuotaLimit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.QuotaLimit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.QuotaLimit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.QuotaLimit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.QuotaLimit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.QuotaLimit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.QuotaLimit prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * `QuotaLimit` defines a specific limit that applies over a specified duration
   * for a limit type. There can be at most one limit for a duration and limit
   * type combination defined within a `QuotaGroup`.
   * </pre>
   *
   * Protobuf type {@code google.api.QuotaLimit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.QuotaLimit, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.QuotaLimit)
      com.google.api.QuotaLimitOrBuilder {
    // Construct using com.google.api.QuotaLimit.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Name of the quota limit. The name is used to refer to the limit when
     * overriding the default limit on per-consumer basis.
     * For group-based quota limits, the name must be unique within the quota
     * group. If a name is not provided, it will be generated from the limit_by
     * and duration fields.
     * For metric-based quota limits, the name must be provided, and it must be
     * unique within the service. The name can only include alphanumeric
     * characters as well as '-'.
     * The maximum length of the limit name is 64 characters.
     * The name of a limit is used as a unique identifier for this limit.
     * Therefore, once a limit has been put into use, its name should be
     * immutable. You can use the display_name field to provide a user-friendly
     * name for the limit. The display name can be evolved over time without
     * affecting the identity of the limit.
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * Name of the quota limit. The name is used to refer to the limit when
     * overriding the default limit on per-consumer basis.
     * For group-based quota limits, the name must be unique within the quota
     * group. If a name is not provided, it will be generated from the limit_by
     * and duration fields.
     * For metric-based quota limits, the name must be provided, and it must be
     * unique within the service. The name can only include alphanumeric
     * characters as well as '-'.
     * The maximum length of the limit name is 64 characters.
     * The name of a limit is used as a unique identifier for this limit.
     * Therefore, once a limit has been put into use, its name should be
     * immutable. You can use the display_name field to provide a user-friendly
     * name for the limit. The display name can be evolved over time without
     * affecting the identity of the limit.
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * Name of the quota limit. The name is used to refer to the limit when
     * overriding the default limit on per-consumer basis.
     * For group-based quota limits, the name must be unique within the quota
     * group. If a name is not provided, it will be generated from the limit_by
     * and duration fields.
     * For metric-based quota limits, the name must be provided, and it must be
     * unique within the service. The name can only include alphanumeric
     * characters as well as '-'.
     * The maximum length of the limit name is 64 characters.
     * The name of a limit is used as a unique identifier for this limit.
     * Therefore, once a limit has been put into use, its name should be
     * immutable. You can use the display_name field to provide a user-friendly
     * name for the limit. The display name can be evolved over time without
     * affecting the identity of the limit.
     * </pre>
     *
     * <code>string name = 6;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * Name of the quota limit. The name is used to refer to the limit when
     * overriding the default limit on per-consumer basis.
     * For group-based quota limits, the name must be unique within the quota
     * group. If a name is not provided, it will be generated from the limit_by
     * and duration fields.
     * For metric-based quota limits, the name must be provided, and it must be
     * unique within the service. The name can only include alphanumeric
     * characters as well as '-'.
     * The maximum length of the limit name is 64 characters.
     * The name of a limit is used as a unique identifier for this limit.
     * Therefore, once a limit has been put into use, its name should be
     * immutable. You can use the display_name field to provide a user-friendly
     * name for the limit. The display name can be evolved over time without
     * affecting the identity of the limit.
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * Name of the quota limit. The name is used to refer to the limit when
     * overriding the default limit on per-consumer basis.
     * For group-based quota limits, the name must be unique within the quota
     * group. If a name is not provided, it will be generated from the limit_by
     * and duration fields.
     * For metric-based quota limits, the name must be provided, and it must be
     * unique within the service. The name can only include alphanumeric
     * characters as well as '-'.
     * The maximum length of the limit name is 64 characters.
     * The name of a limit is used as a unique identifier for this limit.
     * Therefore, once a limit has been put into use, its name should be
     * immutable. You can use the display_name field to provide a user-friendly
     * name for the limit. The display name can be evolved over time without
     * affecting the identity of the limit.
     * </pre>
     *
     * <code>string name = 6;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Optional. User-visible, extended description for this quota limit.
     * Should be used only when more context is needed to understand this limit
     * than provided by the limit's display name (see: `display_name`).
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * Optional. User-visible, extended description for this quota limit.
     * Should be used only when more context is needed to understand this limit
     * than provided by the limit's display name (see: `display_name`).
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * Optional. User-visible, extended description for this quota limit.
     * Should be used only when more context is needed to understand this limit
     * than provided by the limit's display name (see: `display_name`).
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * Optional. User-visible, extended description for this quota limit.
     * Should be used only when more context is needed to understand this limit
     * than provided by the limit's display name (see: `display_name`).
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * Optional. User-visible, extended description for this quota limit.
     * Should be used only when more context is needed to understand this limit
     * than provided by the limit's display name (see: `display_name`).
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Default number of tokens that can be consumed during the specified
     * duration. This is the number of tokens assigned when a client
     * application developer activates the service for his/her project.
     * Specifying a value of 0 will block all requests. This can be used if you
     * are provisioning quota to selected consumers and blocking others.
     * Similarly, a value of -1 will indicate an unlimited quota. No other
     * negative values are allowed.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 default_limit = 3;</code>
     * @return The defaultLimit.
     */
    @java.lang.Override
    public long getDefaultLimit() {
      return instance.getDefaultLimit();
    }
    /**
     * <pre>
     * Default number of tokens that can be consumed during the specified
     * duration. This is the number of tokens assigned when a client
     * application developer activates the service for his/her project.
     * Specifying a value of 0 will block all requests. This can be used if you
     * are provisioning quota to selected consumers and blocking others.
     * Similarly, a value of -1 will indicate an unlimited quota. No other
     * negative values are allowed.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 default_limit = 3;</code>
     * @param value The defaultLimit to set.
     * @return This builder for chaining.
     */
    public Builder setDefaultLimit(long value) {
      copyOnWrite();
      instance.setDefaultLimit(value);
      return this;
    }
    /**
     * <pre>
     * Default number of tokens that can be consumed during the specified
     * duration. This is the number of tokens assigned when a client
     * application developer activates the service for his/her project.
     * Specifying a value of 0 will block all requests. This can be used if you
     * are provisioning quota to selected consumers and blocking others.
     * Similarly, a value of -1 will indicate an unlimited quota. No other
     * negative values are allowed.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 default_limit = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearDefaultLimit() {
      copyOnWrite();
      instance.clearDefaultLimit();
      return this;
    }

    /**
     * <pre>
     * Maximum number of tokens that can be consumed during the specified
     * duration. Client application developers can override the default limit up
     * to this maximum. If specified, this value cannot be set to a value less
     * than the default limit. If not specified, it is set to the default limit.
     * To allow clients to apply overrides with no upper bound, set this to -1,
     * indicating unlimited maximum quota.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 max_limit = 4;</code>
     * @return The maxLimit.
     */
    @java.lang.Override
    public long getMaxLimit() {
      return instance.getMaxLimit();
    }
    /**
     * <pre>
     * Maximum number of tokens that can be consumed during the specified
     * duration. Client application developers can override the default limit up
     * to this maximum. If specified, this value cannot be set to a value less
     * than the default limit. If not specified, it is set to the default limit.
     * To allow clients to apply overrides with no upper bound, set this to -1,
     * indicating unlimited maximum quota.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 max_limit = 4;</code>
     * @param value The maxLimit to set.
     * @return This builder for chaining.
     */
    public Builder setMaxLimit(long value) {
      copyOnWrite();
      instance.setMaxLimit(value);
      return this;
    }
    /**
     * <pre>
     * Maximum number of tokens that can be consumed during the specified
     * duration. Client application developers can override the default limit up
     * to this maximum. If specified, this value cannot be set to a value less
     * than the default limit. If not specified, it is set to the default limit.
     * To allow clients to apply overrides with no upper bound, set this to -1,
     * indicating unlimited maximum quota.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 max_limit = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxLimit() {
      copyOnWrite();
      instance.clearMaxLimit();
      return this;
    }

    /**
     * <pre>
     * Free tier value displayed in the Developers Console for this limit.
     * The free tier is the number of tokens that will be subtracted from the
     * billed amount when billing is enabled.
     * This field can only be set on a limit with duration "1d", in a billable
     * group; it is invalid on any other limit. If this field is not set, it
     * defaults to 0, indicating that there is no free tier for this service.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 free_tier = 7;</code>
     * @return The freeTier.
     */
    @java.lang.Override
    public long getFreeTier() {
      return instance.getFreeTier();
    }
    /**
     * <pre>
     * Free tier value displayed in the Developers Console for this limit.
     * The free tier is the number of tokens that will be subtracted from the
     * billed amount when billing is enabled.
     * This field can only be set on a limit with duration "1d", in a billable
     * group; it is invalid on any other limit. If this field is not set, it
     * defaults to 0, indicating that there is no free tier for this service.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 free_tier = 7;</code>
     * @param value The freeTier to set.
     * @return This builder for chaining.
     */
    public Builder setFreeTier(long value) {
      copyOnWrite();
      instance.setFreeTier(value);
      return this;
    }
    /**
     * <pre>
     * Free tier value displayed in the Developers Console for this limit.
     * The free tier is the number of tokens that will be subtracted from the
     * billed amount when billing is enabled.
     * This field can only be set on a limit with duration "1d", in a billable
     * group; it is invalid on any other limit. If this field is not set, it
     * defaults to 0, indicating that there is no free tier for this service.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>int64 free_tier = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearFreeTier() {
      copyOnWrite();
      instance.clearFreeTier();
      return this;
    }

    /**
     * <pre>
     * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
     * For duration longer than a day, only multiple of days is supported. We
     * support only "100s" and "1d" for now. Additional support will be added in
     * the future. "0" indicates indefinite duration.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>string duration = 5;</code>
     * @return The duration.
     */
    @java.lang.Override
    public java.lang.String getDuration() {
      return instance.getDuration();
    }
    /**
     * <pre>
     * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
     * For duration longer than a day, only multiple of days is supported. We
     * support only "100s" and "1d" for now. Additional support will be added in
     * the future. "0" indicates indefinite duration.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>string duration = 5;</code>
     * @return The bytes for duration.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDurationBytes() {
      return instance.getDurationBytes();
    }
    /**
     * <pre>
     * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
     * For duration longer than a day, only multiple of days is supported. We
     * support only "100s" and "1d" for now. Additional support will be added in
     * the future. "0" indicates indefinite duration.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>string duration = 5;</code>
     * @param value The duration to set.
     * @return This builder for chaining.
     */
    public Builder setDuration(
        java.lang.String value) {
      copyOnWrite();
      instance.setDuration(value);
      return this;
    }
    /**
     * <pre>
     * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
     * For duration longer than a day, only multiple of days is supported. We
     * support only "100s" and "1d" for now. Additional support will be added in
     * the future. "0" indicates indefinite duration.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>string duration = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearDuration() {
      copyOnWrite();
      instance.clearDuration();
      return this;
    }
    /**
     * <pre>
     * Duration of this limit in textual notation. Example: "100s", "24h", "1d".
     * For duration longer than a day, only multiple of days is supported. We
     * support only "100s" and "1d" for now. Additional support will be added in
     * the future. "0" indicates indefinite duration.
     * Used by group-based quotas only.
     * </pre>
     *
     * <code>string duration = 5;</code>
     * @param value The bytes for duration to set.
     * @return This builder for chaining.
     */
    public Builder setDurationBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDurationBytes(value);
      return this;
    }

    /**
     * <pre>
     * The name of the metric this quota limit applies to. The quota limits with
     * the same metric will be checked together during runtime. The metric must be
     * defined within the service config.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string metric = 8;</code>
     * @return The metric.
     */
    @java.lang.Override
    public java.lang.String getMetric() {
      return instance.getMetric();
    }
    /**
     * <pre>
     * The name of the metric this quota limit applies to. The quota limits with
     * the same metric will be checked together during runtime. The metric must be
     * defined within the service config.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string metric = 8;</code>
     * @return The bytes for metric.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMetricBytes() {
      return instance.getMetricBytes();
    }
    /**
     * <pre>
     * The name of the metric this quota limit applies to. The quota limits with
     * the same metric will be checked together during runtime. The metric must be
     * defined within the service config.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string metric = 8;</code>
     * @param value The metric to set.
     * @return This builder for chaining.
     */
    public Builder setMetric(
        java.lang.String value) {
      copyOnWrite();
      instance.setMetric(value);
      return this;
    }
    /**
     * <pre>
     * The name of the metric this quota limit applies to. The quota limits with
     * the same metric will be checked together during runtime. The metric must be
     * defined within the service config.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string metric = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearMetric() {
      copyOnWrite();
      instance.clearMetric();
      return this;
    }
    /**
     * <pre>
     * The name of the metric this quota limit applies to. The quota limits with
     * the same metric will be checked together during runtime. The metric must be
     * defined within the service config.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string metric = 8;</code>
     * @param value The bytes for metric to set.
     * @return This builder for chaining.
     */
    public Builder setMetricBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMetricBytes(value);
      return this;
    }

    /**
     * <pre>
     * Specify the unit of the quota limit. It uses the same syntax as
     * [Metric.unit][]. The supported unit kinds are determined by the quota
     * backend system.
     * The [Google Service Control](https://cloud.google.com/service-control)
     * supports the following unit components:
     * * One of the time intevals:
     *   * "/min"  for quota every minute.
     *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
     *   * Otherwise the quota won't be reset by time, such as storage limit.
     * * One and only one of the granted containers:
     *   * "/{organization}" quota for an organization.
     *   * "/{project}" quota for a project.
     *   * "/{folder}" quota for a folder.
     *   * "/{resource}" quota for a universal resource.
     * * Zero or more quota segmentation dimension. Not all combos are valid.
     *   * "/{region}" quota for every region. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{zone}" quota for every zone. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{resource}" quota for a resource associated with a project or org.
     * Here are some examples:
     * * "1/min/{project}" for quota per minute per project.
     * * "1/min/{user}" for quota per minute per user.
     * * "1/min/{organization}" for quota per minute per organization.
     * Note: the order of unit components is insignificant.
     * The "1" at the beginning is required to follow the metric unit syntax.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string unit = 9;</code>
     * @return The unit.
     */
    @java.lang.Override
    public java.lang.String getUnit() {
      return instance.getUnit();
    }
    /**
     * <pre>
     * Specify the unit of the quota limit. It uses the same syntax as
     * [Metric.unit][]. The supported unit kinds are determined by the quota
     * backend system.
     * The [Google Service Control](https://cloud.google.com/service-control)
     * supports the following unit components:
     * * One of the time intevals:
     *   * "/min"  for quota every minute.
     *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
     *   * Otherwise the quota won't be reset by time, such as storage limit.
     * * One and only one of the granted containers:
     *   * "/{organization}" quota for an organization.
     *   * "/{project}" quota for a project.
     *   * "/{folder}" quota for a folder.
     *   * "/{resource}" quota for a universal resource.
     * * Zero or more quota segmentation dimension. Not all combos are valid.
     *   * "/{region}" quota for every region. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{zone}" quota for every zone. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{resource}" quota for a resource associated with a project or org.
     * Here are some examples:
     * * "1/min/{project}" for quota per minute per project.
     * * "1/min/{user}" for quota per minute per user.
     * * "1/min/{organization}" for quota per minute per organization.
     * Note: the order of unit components is insignificant.
     * The "1" at the beginning is required to follow the metric unit syntax.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string unit = 9;</code>
     * @return The bytes for unit.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnitBytes() {
      return instance.getUnitBytes();
    }
    /**
     * <pre>
     * Specify the unit of the quota limit. It uses the same syntax as
     * [Metric.unit][]. The supported unit kinds are determined by the quota
     * backend system.
     * The [Google Service Control](https://cloud.google.com/service-control)
     * supports the following unit components:
     * * One of the time intevals:
     *   * "/min"  for quota every minute.
     *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
     *   * Otherwise the quota won't be reset by time, such as storage limit.
     * * One and only one of the granted containers:
     *   * "/{organization}" quota for an organization.
     *   * "/{project}" quota for a project.
     *   * "/{folder}" quota for a folder.
     *   * "/{resource}" quota for a universal resource.
     * * Zero or more quota segmentation dimension. Not all combos are valid.
     *   * "/{region}" quota for every region. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{zone}" quota for every zone. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{resource}" quota for a resource associated with a project or org.
     * Here are some examples:
     * * "1/min/{project}" for quota per minute per project.
     * * "1/min/{user}" for quota per minute per user.
     * * "1/min/{organization}" for quota per minute per organization.
     * Note: the order of unit components is insignificant.
     * The "1" at the beginning is required to follow the metric unit syntax.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string unit = 9;</code>
     * @param value The unit to set.
     * @return This builder for chaining.
     */
    public Builder setUnit(
        java.lang.String value) {
      copyOnWrite();
      instance.setUnit(value);
      return this;
    }
    /**
     * <pre>
     * Specify the unit of the quota limit. It uses the same syntax as
     * [Metric.unit][]. The supported unit kinds are determined by the quota
     * backend system.
     * The [Google Service Control](https://cloud.google.com/service-control)
     * supports the following unit components:
     * * One of the time intevals:
     *   * "/min"  for quota every minute.
     *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
     *   * Otherwise the quota won't be reset by time, such as storage limit.
     * * One and only one of the granted containers:
     *   * "/{organization}" quota for an organization.
     *   * "/{project}" quota for a project.
     *   * "/{folder}" quota for a folder.
     *   * "/{resource}" quota for a universal resource.
     * * Zero or more quota segmentation dimension. Not all combos are valid.
     *   * "/{region}" quota for every region. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{zone}" quota for every zone. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{resource}" quota for a resource associated with a project or org.
     * Here are some examples:
     * * "1/min/{project}" for quota per minute per project.
     * * "1/min/{user}" for quota per minute per user.
     * * "1/min/{organization}" for quota per minute per organization.
     * Note: the order of unit components is insignificant.
     * The "1" at the beginning is required to follow the metric unit syntax.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string unit = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnit() {
      copyOnWrite();
      instance.clearUnit();
      return this;
    }
    /**
     * <pre>
     * Specify the unit of the quota limit. It uses the same syntax as
     * [Metric.unit][]. The supported unit kinds are determined by the quota
     * backend system.
     * The [Google Service Control](https://cloud.google.com/service-control)
     * supports the following unit components:
     * * One of the time intevals:
     *   * "/min"  for quota every minute.
     *   * "/d"  for quota every 24 hours, starting 00:00 US Pacific Time.
     *   * Otherwise the quota won't be reset by time, such as storage limit.
     * * One and only one of the granted containers:
     *   * "/{organization}" quota for an organization.
     *   * "/{project}" quota for a project.
     *   * "/{folder}" quota for a folder.
     *   * "/{resource}" quota for a universal resource.
     * * Zero or more quota segmentation dimension. Not all combos are valid.
     *   * "/{region}" quota for every region. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{zone}" quota for every zone. Not to be used with time intervals.
     *   * Otherwise the resources granted on the target is not segmented.
     *   * "/{resource}" quota for a resource associated with a project or org.
     * Here are some examples:
     * * "1/min/{project}" for quota per minute per project.
     * * "1/min/{user}" for quota per minute per user.
     * * "1/min/{organization}" for quota per minute per organization.
     * Note: the order of unit components is insignificant.
     * The "1" at the beginning is required to follow the metric unit syntax.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>string unit = 9;</code>
     * @param value The bytes for unit to set.
     * @return This builder for chaining.
     */
    public Builder setUnitBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUnitBytes(value);
      return this;
    }

    @java.lang.Override

    public int getValuesCount() {
      return instance.getValuesMap().size();
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    @java.lang.Override

    public boolean containsValues(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return instance.getValuesMap().containsKey(key);
    }

    public Builder clearValues() {
      copyOnWrite();
      instance.getMutableValuesMap().clear();
      return this;
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */

    public Builder removeValues(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableValuesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getValuesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getValues() {
      return getValuesMap();
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Long> getValuesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getValuesMap());
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    @java.lang.Override

    public long getValuesOrDefault(
        java.lang.String key,
        long defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          instance.getValuesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    @java.lang.Override

    public long getValuesOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, java.lang.Long> map =
          instance.getValuesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    public Builder putValues(
        java.lang.String key,
        long value) {
      java.lang.Class<?> keyClass = key.getClass();
      
      copyOnWrite();
      instance.getMutableValuesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * Tiered limit values. Also allows for regional or zone overrides for these
     * values if "/{region}" or "/{zone}" is specified in the unit field.
     * Currently supported tiers from low to high:
     * VERY_LOW, LOW, STANDARD, HIGH, VERY_HIGH
     * To apply different limit values for users according to their tiers, specify
     * the values for the tiers you want to differentiate. For example:
     * {LOW:100, STANDARD:500, HIGH:1000, VERY_HIGH:5000}
     * The limit value for each tier is optional except for the tier STANDARD.
     * The limit value for an unspecified tier falls to the value of its next
     * tier towards tier STANDARD. For the above example, the limit value for tier
     * STANDARD is 500.
     * To apply the same limit value for all users, just specify limit value for
     * tier STANDARD. For example: {STANDARD:500}.
     * To apply a regional overide for a tier, add a map entry with key
     * "&lt;TIER&gt;/&lt;region&gt;", where &lt;region&gt; is a region name. Similarly, for a zone
     * override, add a map entry with key "&lt;TIER&gt;/{zone}".
     * Further, a wildcard can be used at the end of a zone name in order to
     * specify zone level overrides. For example:
     * LOW: 10, STANDARD: 50, HIGH: 100,
     * LOW/us-central1: 20, STANDARD/us-central1: 60, HIGH/us-central1: 200,
     * LOW/us-central1-*: 10, STANDARD/us-central1-*: 20, HIGH/us-central1-*: 80
     * The regional overrides tier set for each region must be the same as
     * the tier set for default limit values. Same rule applies for zone overrides
     * tier as well.
     * Used by metric-based quotas only.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; values = 10;</code>
     */
    public Builder putAllValues(
        java.util.Map<java.lang.String, java.lang.Long> values) {
      copyOnWrite();
      instance.getMutableValuesMap().putAll(values);
      return this;
    }

    /**
     * <pre>
     * User-visible display name for this limit.
     * Optional. If not set, the UI will provide a default display name based on
     * the quota configuration. This field can be used to override the default
     * display name generated from the configuration.
     * </pre>
     *
     * <code>string display_name = 12;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      return instance.getDisplayName();
    }
    /**
     * <pre>
     * User-visible display name for this limit.
     * Optional. If not set, the UI will provide a default display name based on
     * the quota configuration. This field can be used to override the default
     * display name generated from the configuration.
     * </pre>
     *
     * <code>string display_name = 12;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      return instance.getDisplayNameBytes();
    }
    /**
     * <pre>
     * User-visible display name for this limit.
     * Optional. If not set, the UI will provide a default display name based on
     * the quota configuration. This field can be used to override the default
     * display name generated from the configuration.
     * </pre>
     *
     * <code>string display_name = 12;</code>
     * @param value The displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayName(
        java.lang.String value) {
      copyOnWrite();
      instance.setDisplayName(value);
      return this;
    }
    /**
     * <pre>
     * User-visible display name for this limit.
     * Optional. If not set, the UI will provide a default display name based on
     * the quota configuration. This field can be used to override the default
     * display name generated from the configuration.
     * </pre>
     *
     * <code>string display_name = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisplayName() {
      copyOnWrite();
      instance.clearDisplayName();
      return this;
    }
    /**
     * <pre>
     * User-visible display name for this limit.
     * Optional. If not set, the UI will provide a default display name based on
     * the quota configuration. This field can be used to override the default
     * display name generated from the configuration.
     * </pre>
     *
     * <code>string display_name = 12;</code>
     * @param value The bytes for displayName to set.
     * @return This builder for chaining.
     */
    public Builder setDisplayNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDisplayNameBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.QuotaLimit)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.QuotaLimit();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "description_",
            "defaultLimit_",
            "maxLimit_",
            "duration_",
            "name_",
            "freeTier_",
            "metric_",
            "unit_",
            "values_",
            ValuesDefaultEntryHolder.defaultEntry,
            "displayName_",
          };
          java.lang.String info =
              "\u0000\n\u0000\u0000\u0002\f\n\u0001\u0000\u0000\u0002\u0208\u0003\u0002\u0004\u0002" +
              "\u0005\u0208\u0006\u0208\u0007\u0002\b\u0208\t\u0208\n2\f\u0208";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.QuotaLimit> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.QuotaLimit.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.QuotaLimit>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.QuotaLimit)
  private static final com.google.api.QuotaLimit DEFAULT_INSTANCE;
  static {
    QuotaLimit defaultInstance = new QuotaLimit();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      QuotaLimit.class, defaultInstance);
  }

  public static com.google.api.QuotaLimit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<QuotaLimit> PARSER;

  public static com.google.protobuf.Parser<QuotaLimit> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}


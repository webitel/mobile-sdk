// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/routing.proto

package com.google.api;

/**
 * <pre>
 * A projection from an input message to the GRPC or REST header.
 * </pre>
 *
 * Protobuf type {@code google.api.RoutingParameter}
 */
public  final class RoutingParameter extends
    com.google.protobuf.GeneratedMessageLite<
        RoutingParameter, RoutingParameter.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.RoutingParameter)
    RoutingParameterOrBuilder {
  private RoutingParameter() {
    field_ = "";
    pathTemplate_ = "";
  }
  public static final int FIELD_FIELD_NUMBER = 1;
  private java.lang.String field_;
  /**
   * <pre>
   * A request field to extract the header key-value pair from.
   * </pre>
   *
   * <code>string field = 1;</code>
   * @return The field.
   */
  @java.lang.Override
  public java.lang.String getField() {
    return field_;
  }
  /**
   * <pre>
   * A request field to extract the header key-value pair from.
   * </pre>
   *
   * <code>string field = 1;</code>
   * @return The bytes for field.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getFieldBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(field_);
  }
  /**
   * <pre>
   * A request field to extract the header key-value pair from.
   * </pre>
   *
   * <code>string field = 1;</code>
   * @param value The field to set.
   */
  private void setField(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    field_ = value;
  }
  /**
   * <pre>
   * A request field to extract the header key-value pair from.
   * </pre>
   *
   * <code>string field = 1;</code>
   */
  private void clearField() {
    
    field_ = getDefaultInstance().getField();
  }
  /**
   * <pre>
   * A request field to extract the header key-value pair from.
   * </pre>
   *
   * <code>string field = 1;</code>
   * @param value The bytes for field to set.
   */
  private void setFieldBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    field_ = value.toStringUtf8();
    
  }

  public static final int PATH_TEMPLATE_FIELD_NUMBER = 2;
  private java.lang.String pathTemplate_;
  /**
   * <pre>
   * A pattern matching the key-value field. Optional.
   * If not specified, the whole field specified in the `field` field will be
   * taken as value, and its name used as key. If specified, it MUST contain
   * exactly one named segment (along with any number of unnamed segments) The
   * pattern will be matched over the field specified in the `field` field, then
   * if the match is successful:
   * - the name of the single named segment will be used as a header name,
   * - the match value of the segment will be used as a header value;
   * if the match is NOT successful, nothing will be sent.
   * Example:
   *               -- This is a field in the request message
   *              |   that the header value will be extracted from.
   *              |
   *              |                     -- This is the key name in the
   *              |                    |   routing header.
   *              V                    |
   *     field: "table_name"           v
   *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *                                                ^            ^
   *                                                |            |
   *       In the {} brackets is the pattern that --             |
   *       specifies what to extract from the                    |
   *       field as a value to be sent.                          |
   *                                                             |
   *      The string in the field must match the whole pattern --
   *      before brackets, inside brackets, after brackets.
   * When looking at this specific example, we can see that:
   * - A key-value pair with the key `table_location`
   *   and the value matching `instances/&#42;` should be added
   *   to the x-goog-request-params routing header.
   * - The value is extracted from the request message's `table_name` field
   *   if it matches the full pattern specified:
   *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
   * **NB:** If the `path_template` field is not provided, the key name is
   * equal to the field name, and the whole field should be sent as a value.
   * This makes the pattern for the field and the value functionally equivalent
   * to `**`, and the configuration
   *     {
   *       field: "table_name"
   *     }
   * is a functionally equivalent shorthand to:
   *     {
   *       field: "table_name"
   *       path_template: "{table_name=**}"
   *     }
   * See Example 1 for more details.
   * </pre>
   *
   * <code>string path_template = 2;</code>
   * @return The pathTemplate.
   */
  @java.lang.Override
  public java.lang.String getPathTemplate() {
    return pathTemplate_;
  }
  /**
   * <pre>
   * A pattern matching the key-value field. Optional.
   * If not specified, the whole field specified in the `field` field will be
   * taken as value, and its name used as key. If specified, it MUST contain
   * exactly one named segment (along with any number of unnamed segments) The
   * pattern will be matched over the field specified in the `field` field, then
   * if the match is successful:
   * - the name of the single named segment will be used as a header name,
   * - the match value of the segment will be used as a header value;
   * if the match is NOT successful, nothing will be sent.
   * Example:
   *               -- This is a field in the request message
   *              |   that the header value will be extracted from.
   *              |
   *              |                     -- This is the key name in the
   *              |                    |   routing header.
   *              V                    |
   *     field: "table_name"           v
   *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *                                                ^            ^
   *                                                |            |
   *       In the {} brackets is the pattern that --             |
   *       specifies what to extract from the                    |
   *       field as a value to be sent.                          |
   *                                                             |
   *      The string in the field must match the whole pattern --
   *      before brackets, inside brackets, after brackets.
   * When looking at this specific example, we can see that:
   * - A key-value pair with the key `table_location`
   *   and the value matching `instances/&#42;` should be added
   *   to the x-goog-request-params routing header.
   * - The value is extracted from the request message's `table_name` field
   *   if it matches the full pattern specified:
   *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
   * **NB:** If the `path_template` field is not provided, the key name is
   * equal to the field name, and the whole field should be sent as a value.
   * This makes the pattern for the field and the value functionally equivalent
   * to `**`, and the configuration
   *     {
   *       field: "table_name"
   *     }
   * is a functionally equivalent shorthand to:
   *     {
   *       field: "table_name"
   *       path_template: "{table_name=**}"
   *     }
   * See Example 1 for more details.
   * </pre>
   *
   * <code>string path_template = 2;</code>
   * @return The bytes for pathTemplate.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPathTemplateBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(pathTemplate_);
  }
  /**
   * <pre>
   * A pattern matching the key-value field. Optional.
   * If not specified, the whole field specified in the `field` field will be
   * taken as value, and its name used as key. If specified, it MUST contain
   * exactly one named segment (along with any number of unnamed segments) The
   * pattern will be matched over the field specified in the `field` field, then
   * if the match is successful:
   * - the name of the single named segment will be used as a header name,
   * - the match value of the segment will be used as a header value;
   * if the match is NOT successful, nothing will be sent.
   * Example:
   *               -- This is a field in the request message
   *              |   that the header value will be extracted from.
   *              |
   *              |                     -- This is the key name in the
   *              |                    |   routing header.
   *              V                    |
   *     field: "table_name"           v
   *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *                                                ^            ^
   *                                                |            |
   *       In the {} brackets is the pattern that --             |
   *       specifies what to extract from the                    |
   *       field as a value to be sent.                          |
   *                                                             |
   *      The string in the field must match the whole pattern --
   *      before brackets, inside brackets, after brackets.
   * When looking at this specific example, we can see that:
   * - A key-value pair with the key `table_location`
   *   and the value matching `instances/&#42;` should be added
   *   to the x-goog-request-params routing header.
   * - The value is extracted from the request message's `table_name` field
   *   if it matches the full pattern specified:
   *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
   * **NB:** If the `path_template` field is not provided, the key name is
   * equal to the field name, and the whole field should be sent as a value.
   * This makes the pattern for the field and the value functionally equivalent
   * to `**`, and the configuration
   *     {
   *       field: "table_name"
   *     }
   * is a functionally equivalent shorthand to:
   *     {
   *       field: "table_name"
   *       path_template: "{table_name=**}"
   *     }
   * See Example 1 for more details.
   * </pre>
   *
   * <code>string path_template = 2;</code>
   * @param value The pathTemplate to set.
   */
  private void setPathTemplate(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    pathTemplate_ = value;
  }
  /**
   * <pre>
   * A pattern matching the key-value field. Optional.
   * If not specified, the whole field specified in the `field` field will be
   * taken as value, and its name used as key. If specified, it MUST contain
   * exactly one named segment (along with any number of unnamed segments) The
   * pattern will be matched over the field specified in the `field` field, then
   * if the match is successful:
   * - the name of the single named segment will be used as a header name,
   * - the match value of the segment will be used as a header value;
   * if the match is NOT successful, nothing will be sent.
   * Example:
   *               -- This is a field in the request message
   *              |   that the header value will be extracted from.
   *              |
   *              |                     -- This is the key name in the
   *              |                    |   routing header.
   *              V                    |
   *     field: "table_name"           v
   *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *                                                ^            ^
   *                                                |            |
   *       In the {} brackets is the pattern that --             |
   *       specifies what to extract from the                    |
   *       field as a value to be sent.                          |
   *                                                             |
   *      The string in the field must match the whole pattern --
   *      before brackets, inside brackets, after brackets.
   * When looking at this specific example, we can see that:
   * - A key-value pair with the key `table_location`
   *   and the value matching `instances/&#42;` should be added
   *   to the x-goog-request-params routing header.
   * - The value is extracted from the request message's `table_name` field
   *   if it matches the full pattern specified:
   *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
   * **NB:** If the `path_template` field is not provided, the key name is
   * equal to the field name, and the whole field should be sent as a value.
   * This makes the pattern for the field and the value functionally equivalent
   * to `**`, and the configuration
   *     {
   *       field: "table_name"
   *     }
   * is a functionally equivalent shorthand to:
   *     {
   *       field: "table_name"
   *       path_template: "{table_name=**}"
   *     }
   * See Example 1 for more details.
   * </pre>
   *
   * <code>string path_template = 2;</code>
   */
  private void clearPathTemplate() {
    
    pathTemplate_ = getDefaultInstance().getPathTemplate();
  }
  /**
   * <pre>
   * A pattern matching the key-value field. Optional.
   * If not specified, the whole field specified in the `field` field will be
   * taken as value, and its name used as key. If specified, it MUST contain
   * exactly one named segment (along with any number of unnamed segments) The
   * pattern will be matched over the field specified in the `field` field, then
   * if the match is successful:
   * - the name of the single named segment will be used as a header name,
   * - the match value of the segment will be used as a header value;
   * if the match is NOT successful, nothing will be sent.
   * Example:
   *               -- This is a field in the request message
   *              |   that the header value will be extracted from.
   *              |
   *              |                     -- This is the key name in the
   *              |                    |   routing header.
   *              V                    |
   *     field: "table_name"           v
   *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *                                                ^            ^
   *                                                |            |
   *       In the {} brackets is the pattern that --             |
   *       specifies what to extract from the                    |
   *       field as a value to be sent.                          |
   *                                                             |
   *      The string in the field must match the whole pattern --
   *      before brackets, inside brackets, after brackets.
   * When looking at this specific example, we can see that:
   * - A key-value pair with the key `table_location`
   *   and the value matching `instances/&#42;` should be added
   *   to the x-goog-request-params routing header.
   * - The value is extracted from the request message's `table_name` field
   *   if it matches the full pattern specified:
   *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
   * **NB:** If the `path_template` field is not provided, the key name is
   * equal to the field name, and the whole field should be sent as a value.
   * This makes the pattern for the field and the value functionally equivalent
   * to `**`, and the configuration
   *     {
   *       field: "table_name"
   *     }
   * is a functionally equivalent shorthand to:
   *     {
   *       field: "table_name"
   *       path_template: "{table_name=**}"
   *     }
   * See Example 1 for more details.
   * </pre>
   *
   * <code>string path_template = 2;</code>
   * @param value The bytes for pathTemplate to set.
   */
  private void setPathTemplateBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    pathTemplate_ = value.toStringUtf8();
    
  }

  public static com.google.api.RoutingParameter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingParameter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingParameter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingParameter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingParameter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingParameter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingParameter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingParameter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.RoutingParameter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingParameter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.RoutingParameter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingParameter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.RoutingParameter prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A projection from an input message to the GRPC or REST header.
   * </pre>
   *
   * Protobuf type {@code google.api.RoutingParameter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.RoutingParameter, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.RoutingParameter)
      com.google.api.RoutingParameterOrBuilder {
    // Construct using com.google.api.RoutingParameter.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A request field to extract the header key-value pair from.
     * </pre>
     *
     * <code>string field = 1;</code>
     * @return The field.
     */
    @java.lang.Override
    public java.lang.String getField() {
      return instance.getField();
    }
    /**
     * <pre>
     * A request field to extract the header key-value pair from.
     * </pre>
     *
     * <code>string field = 1;</code>
     * @return The bytes for field.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldBytes() {
      return instance.getFieldBytes();
    }
    /**
     * <pre>
     * A request field to extract the header key-value pair from.
     * </pre>
     *
     * <code>string field = 1;</code>
     * @param value The field to set.
     * @return This builder for chaining.
     */
    public Builder setField(
        java.lang.String value) {
      copyOnWrite();
      instance.setField(value);
      return this;
    }
    /**
     * <pre>
     * A request field to extract the header key-value pair from.
     * </pre>
     *
     * <code>string field = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearField() {
      copyOnWrite();
      instance.clearField();
      return this;
    }
    /**
     * <pre>
     * A request field to extract the header key-value pair from.
     * </pre>
     *
     * <code>string field = 1;</code>
     * @param value The bytes for field to set.
     * @return This builder for chaining.
     */
    public Builder setFieldBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFieldBytes(value);
      return this;
    }

    /**
     * <pre>
     * A pattern matching the key-value field. Optional.
     * If not specified, the whole field specified in the `field` field will be
     * taken as value, and its name used as key. If specified, it MUST contain
     * exactly one named segment (along with any number of unnamed segments) The
     * pattern will be matched over the field specified in the `field` field, then
     * if the match is successful:
     * - the name of the single named segment will be used as a header name,
     * - the match value of the segment will be used as a header value;
     * if the match is NOT successful, nothing will be sent.
     * Example:
     *               -- This is a field in the request message
     *              |   that the header value will be extracted from.
     *              |
     *              |                     -- This is the key name in the
     *              |                    |   routing header.
     *              V                    |
     *     field: "table_name"           v
     *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
     *                                                ^            ^
     *                                                |            |
     *       In the {} brackets is the pattern that --             |
     *       specifies what to extract from the                    |
     *       field as a value to be sent.                          |
     *                                                             |
     *      The string in the field must match the whole pattern --
     *      before brackets, inside brackets, after brackets.
     * When looking at this specific example, we can see that:
     * - A key-value pair with the key `table_location`
     *   and the value matching `instances/&#42;` should be added
     *   to the x-goog-request-params routing header.
     * - The value is extracted from the request message's `table_name` field
     *   if it matches the full pattern specified:
     *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
     * **NB:** If the `path_template` field is not provided, the key name is
     * equal to the field name, and the whole field should be sent as a value.
     * This makes the pattern for the field and the value functionally equivalent
     * to `**`, and the configuration
     *     {
     *       field: "table_name"
     *     }
     * is a functionally equivalent shorthand to:
     *     {
     *       field: "table_name"
     *       path_template: "{table_name=**}"
     *     }
     * See Example 1 for more details.
     * </pre>
     *
     * <code>string path_template = 2;</code>
     * @return The pathTemplate.
     */
    @java.lang.Override
    public java.lang.String getPathTemplate() {
      return instance.getPathTemplate();
    }
    /**
     * <pre>
     * A pattern matching the key-value field. Optional.
     * If not specified, the whole field specified in the `field` field will be
     * taken as value, and its name used as key. If specified, it MUST contain
     * exactly one named segment (along with any number of unnamed segments) The
     * pattern will be matched over the field specified in the `field` field, then
     * if the match is successful:
     * - the name of the single named segment will be used as a header name,
     * - the match value of the segment will be used as a header value;
     * if the match is NOT successful, nothing will be sent.
     * Example:
     *               -- This is a field in the request message
     *              |   that the header value will be extracted from.
     *              |
     *              |                     -- This is the key name in the
     *              |                    |   routing header.
     *              V                    |
     *     field: "table_name"           v
     *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
     *                                                ^            ^
     *                                                |            |
     *       In the {} brackets is the pattern that --             |
     *       specifies what to extract from the                    |
     *       field as a value to be sent.                          |
     *                                                             |
     *      The string in the field must match the whole pattern --
     *      before brackets, inside brackets, after brackets.
     * When looking at this specific example, we can see that:
     * - A key-value pair with the key `table_location`
     *   and the value matching `instances/&#42;` should be added
     *   to the x-goog-request-params routing header.
     * - The value is extracted from the request message's `table_name` field
     *   if it matches the full pattern specified:
     *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
     * **NB:** If the `path_template` field is not provided, the key name is
     * equal to the field name, and the whole field should be sent as a value.
     * This makes the pattern for the field and the value functionally equivalent
     * to `**`, and the configuration
     *     {
     *       field: "table_name"
     *     }
     * is a functionally equivalent shorthand to:
     *     {
     *       field: "table_name"
     *       path_template: "{table_name=**}"
     *     }
     * See Example 1 for more details.
     * </pre>
     *
     * <code>string path_template = 2;</code>
     * @return The bytes for pathTemplate.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathTemplateBytes() {
      return instance.getPathTemplateBytes();
    }
    /**
     * <pre>
     * A pattern matching the key-value field. Optional.
     * If not specified, the whole field specified in the `field` field will be
     * taken as value, and its name used as key. If specified, it MUST contain
     * exactly one named segment (along with any number of unnamed segments) The
     * pattern will be matched over the field specified in the `field` field, then
     * if the match is successful:
     * - the name of the single named segment will be used as a header name,
     * - the match value of the segment will be used as a header value;
     * if the match is NOT successful, nothing will be sent.
     * Example:
     *               -- This is a field in the request message
     *              |   that the header value will be extracted from.
     *              |
     *              |                     -- This is the key name in the
     *              |                    |   routing header.
     *              V                    |
     *     field: "table_name"           v
     *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
     *                                                ^            ^
     *                                                |            |
     *       In the {} brackets is the pattern that --             |
     *       specifies what to extract from the                    |
     *       field as a value to be sent.                          |
     *                                                             |
     *      The string in the field must match the whole pattern --
     *      before brackets, inside brackets, after brackets.
     * When looking at this specific example, we can see that:
     * - A key-value pair with the key `table_location`
     *   and the value matching `instances/&#42;` should be added
     *   to the x-goog-request-params routing header.
     * - The value is extracted from the request message's `table_name` field
     *   if it matches the full pattern specified:
     *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
     * **NB:** If the `path_template` field is not provided, the key name is
     * equal to the field name, and the whole field should be sent as a value.
     * This makes the pattern for the field and the value functionally equivalent
     * to `**`, and the configuration
     *     {
     *       field: "table_name"
     *     }
     * is a functionally equivalent shorthand to:
     *     {
     *       field: "table_name"
     *       path_template: "{table_name=**}"
     *     }
     * See Example 1 for more details.
     * </pre>
     *
     * <code>string path_template = 2;</code>
     * @param value The pathTemplate to set.
     * @return This builder for chaining.
     */
    public Builder setPathTemplate(
        java.lang.String value) {
      copyOnWrite();
      instance.setPathTemplate(value);
      return this;
    }
    /**
     * <pre>
     * A pattern matching the key-value field. Optional.
     * If not specified, the whole field specified in the `field` field will be
     * taken as value, and its name used as key. If specified, it MUST contain
     * exactly one named segment (along with any number of unnamed segments) The
     * pattern will be matched over the field specified in the `field` field, then
     * if the match is successful:
     * - the name of the single named segment will be used as a header name,
     * - the match value of the segment will be used as a header value;
     * if the match is NOT successful, nothing will be sent.
     * Example:
     *               -- This is a field in the request message
     *              |   that the header value will be extracted from.
     *              |
     *              |                     -- This is the key name in the
     *              |                    |   routing header.
     *              V                    |
     *     field: "table_name"           v
     *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
     *                                                ^            ^
     *                                                |            |
     *       In the {} brackets is the pattern that --             |
     *       specifies what to extract from the                    |
     *       field as a value to be sent.                          |
     *                                                             |
     *      The string in the field must match the whole pattern --
     *      before brackets, inside brackets, after brackets.
     * When looking at this specific example, we can see that:
     * - A key-value pair with the key `table_location`
     *   and the value matching `instances/&#42;` should be added
     *   to the x-goog-request-params routing header.
     * - The value is extracted from the request message's `table_name` field
     *   if it matches the full pattern specified:
     *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
     * **NB:** If the `path_template` field is not provided, the key name is
     * equal to the field name, and the whole field should be sent as a value.
     * This makes the pattern for the field and the value functionally equivalent
     * to `**`, and the configuration
     *     {
     *       field: "table_name"
     *     }
     * is a functionally equivalent shorthand to:
     *     {
     *       field: "table_name"
     *       path_template: "{table_name=**}"
     *     }
     * See Example 1 for more details.
     * </pre>
     *
     * <code>string path_template = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPathTemplate() {
      copyOnWrite();
      instance.clearPathTemplate();
      return this;
    }
    /**
     * <pre>
     * A pattern matching the key-value field. Optional.
     * If not specified, the whole field specified in the `field` field will be
     * taken as value, and its name used as key. If specified, it MUST contain
     * exactly one named segment (along with any number of unnamed segments) The
     * pattern will be matched over the field specified in the `field` field, then
     * if the match is successful:
     * - the name of the single named segment will be used as a header name,
     * - the match value of the segment will be used as a header value;
     * if the match is NOT successful, nothing will be sent.
     * Example:
     *               -- This is a field in the request message
     *              |   that the header value will be extracted from.
     *              |
     *              |                     -- This is the key name in the
     *              |                    |   routing header.
     *              V                    |
     *     field: "table_name"           v
     *     path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
     *                                                ^            ^
     *                                                |            |
     *       In the {} brackets is the pattern that --             |
     *       specifies what to extract from the                    |
     *       field as a value to be sent.                          |
     *                                                             |
     *      The string in the field must match the whole pattern --
     *      before brackets, inside brackets, after brackets.
     * When looking at this specific example, we can see that:
     * - A key-value pair with the key `table_location`
     *   and the value matching `instances/&#42;` should be added
     *   to the x-goog-request-params routing header.
     * - The value is extracted from the request message's `table_name` field
     *   if it matches the full pattern specified:
     *   `projects/&#42;&#47;instances/&#42;&#47;tables/&#42;`.
     * **NB:** If the `path_template` field is not provided, the key name is
     * equal to the field name, and the whole field should be sent as a value.
     * This makes the pattern for the field and the value functionally equivalent
     * to `**`, and the configuration
     *     {
     *       field: "table_name"
     *     }
     * is a functionally equivalent shorthand to:
     *     {
     *       field: "table_name"
     *       path_template: "{table_name=**}"
     *     }
     * See Example 1 for more details.
     * </pre>
     *
     * <code>string path_template = 2;</code>
     * @param value The bytes for pathTemplate to set.
     * @return This builder for chaining.
     */
    public Builder setPathTemplateBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPathTemplateBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.RoutingParameter)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.RoutingParameter();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "field_",
            "pathTemplate_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.RoutingParameter> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.RoutingParameter.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.RoutingParameter>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.RoutingParameter)
  private static final com.google.api.RoutingParameter DEFAULT_INSTANCE;
  static {
    RoutingParameter defaultInstance = new RoutingParameter();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      RoutingParameter.class, defaultInstance);
  }

  public static com.google.api.RoutingParameter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<RoutingParameter> PARSER;

  public static com.google.protobuf.Parser<RoutingParameter> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}


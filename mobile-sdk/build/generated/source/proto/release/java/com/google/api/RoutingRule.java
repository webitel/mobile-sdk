// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/routing.proto

package com.google.api;

/**
 * <pre>
 * Specifies the routing information that should be sent along with the request
 * in the form of routing header.
 * **NOTE:** All service configuration rules follow the "last one wins" order.
 * The examples below will apply to an RPC which has the following request type:
 * Message Definition:
 *     message Request {
 *       // The name of the Table
 *       // Values can be of the following formats:
 *       // - `projects/&lt;project&gt;/tables/&lt;table&gt;`
 *       // - `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`
 *       // - `region/&lt;region&gt;/zones/&lt;zone&gt;/tables/&lt;table&gt;`
 *       string table_name = 1;
 *       // This value specifies routing for replication.
 *       // It can be in the following formats:
 *       // - `profiles/&lt;profile_id&gt;`
 *       // - a legacy `profile_id` that can be any string
 *       string app_profile_id = 2;
 *     }
 * Example message:
 *     {
 *       table_name: projects/proj_foo/instances/instance_bar/table/table_baz,
 *       app_profile_id: profiles/prof_qux
 *     }
 * The routing header consists of one or multiple key-value pairs. Every key
 * and value must be percent-encoded, and joined together in the format of
 * `key1=value1&amp;key2=value2`.
 * In the examples below I am skipping the percent-encoding for readablity.
 * Example 1
 * Extracting a field from the request to put into the routing header
 * unchanged, with the key equal to the field name.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take the `app_profile_id`.
 *       routing_parameters {
 *         field: "app_profile_id"
 *       }
 *     };
 * result:
 *     x-goog-request-params: app_profile_id=profiles/prof_qux
 * Example 2
 * Extracting a field from the request to put into the routing header
 * unchanged, with the key different from the field name.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take the `app_profile_id`, but name it `routing_id` in the header.
 *       routing_parameters {
 *         field: "app_profile_id"
 *         path_template: "{routing_id=**}"
 *       }
 *     };
 * result:
 *     x-goog-request-params: routing_id=profiles/prof_qux
 * Example 3
 * Extracting a field from the request to put into the routing
 * header, while matching a path template syntax on the field's value.
 * NB: it is more useful to send nothing than to send garbage for the purpose
 * of dynamic routing, since garbage pollutes cache. Thus the matching.
 * Sub-example 3a
 * The field matches the template.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take the `table_name`, if it's well-formed (with project-based
 *       // syntax).
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{table_name=projects/&#42;&#47;instances/&#42;&#47;&#42;*}"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
 * Sub-example 3b
 * The field does not match the template.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take the `table_name`, if it's well-formed (with region-based
 *       // syntax).
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{table_name=regions/&#42;&#47;zones/&#42;&#47;&#42;*}"
 *       }
 *     };
 * result:
 *     &lt;no routing header will be sent&gt;
 * Sub-example 3c
 * Multiple alternative conflictingly named path templates are
 * specified. The one that matches is used to construct the header.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take the `table_name`, if it's well-formed, whether
 *       // using the region- or projects-based syntax.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{table_name=regions/&#42;&#47;zones/&#42;&#47;&#42;*}"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{table_name=projects/&#42;&#47;instances/&#42;&#47;&#42;*}"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
 * Example 4
 * Extracting a single routing header key-value pair by matching a
 * template syntax on (a part of) a single request field.
 * annotation:
 *     option (google.api.routing) = {
 *       // Take just the project id from the `table_name` field.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{routing_id=projects/&#42;}/&#42;*"
 *       }
 *     };
 * result:
 *     x-goog-request-params: routing_id=projects/proj_foo
 * Example 5
 * Extracting a single routing header key-value pair by matching
 * several conflictingly named path templates on (parts of) a single request
 * field. The last template to match "wins" the conflict.
 * annotation:
 *     option (google.api.routing) = {
 *       // If the `table_name` does not have instances information,
 *       // take just the project id for routing.
 *       // Otherwise take project + instance.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{routing_id=projects/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{routing_id=projects/&#42;&#47;instances/&#42;}/&#42;*"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     routing_id=projects/proj_foo/instances/instance_bar
 * Example 6
 * Extracting multiple routing header key-value pairs by matching
 * several non-conflicting path templates on (parts of) a single request field.
 * Sub-example 6a
 * Make the templates strict, so that if the `table_name` does not
 * have an instance information, nothing is sent.
 * annotation:
 *     option (google.api.routing) = {
 *       // The routing code needs two keys instead of one composite
 *       // but works only for the tables with the "project-instance" name
 *       // syntax.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{project_id=projects/&#42;}/instances/&#42;&#47;&#42;*"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "projects/&#42;&#47;{instance_id=instances/&#42;}/&#42;*"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
 * Sub-example 6b
 * Make the templates loose, so that if the `table_name` does not
 * have an instance information, just the project id part is sent.
 * annotation:
 *     option (google.api.routing) = {
 *       // The routing code wants two keys instead of one composite
 *       // but will work with just the `project_id` for tables without
 *       // an instance in the `table_name`.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{project_id=projects/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "projects/&#42;&#47;{instance_id=instances/&#42;}/&#42;*"
 *       }
 *     };
 * result (is the same as 6a for our example message because it has the instance
 * information):
 *     x-goog-request-params:
 *     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
 * Example 7
 * Extracting multiple routing header key-value pairs by matching
 * several path templates on multiple request fields.
 * NB: note that here there is no way to specify sending nothing if one of the
 * fields does not match its template. E.g. if the `table_name` is in the wrong
 * format, the `project_id` will not be sent, but the `routing_id` will be.
 * The backend routing code has to be aware of that and be prepared to not
 * receive a full complement of keys if it expects multiple.
 * annotation:
 *     option (google.api.routing) = {
 *       // The routing needs both `project_id` and `routing_id`
 *       // (from the `app_profile_id` field) for routing.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{project_id=projects/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *         field: "app_profile_id"
 *         path_template: "{routing_id=**}"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     project_id=projects/proj_foo&amp;routing_id=profiles/prof_qux
 * Example 8
 * Extracting a single routing header key-value pair by matching
 * several conflictingly named path templates on several request fields. The
 * last template to match "wins" the conflict.
 * annotation:
 *     option (google.api.routing) = {
 *       // The `routing_id` can be a project id or a region id depending on
 *       // the table name format, but only if the `app_profile_id` is not set.
 *       // If `app_profile_id` is set it should be used instead.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{routing_id=projects/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *          field: "table_name"
 *          path_template: "{routing_id=regions/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *         field: "app_profile_id"
 *         path_template: "{routing_id=**}"
 *       }
 *     };
 * result:
 *     x-goog-request-params: routing_id=profiles/prof_qux
 * Example 9
 * Bringing it all together.
 * annotation:
 *     option (google.api.routing) = {
 *       // For routing both `table_location` and a `routing_id` are needed.
 *       //
 *       // table_location can be either an instance id or a region+zone id.
 *       //
 *       // For `routing_id`, take the value of `app_profile_id`
 *       // - If it's in the format `profiles/&lt;profile_id&gt;`, send
 *       // just the `&lt;profile_id&gt;` part.
 *       // - If it's any other literal, send it as is.
 *       // If the `app_profile_id` is empty, and the `table_name` starts with
 *       // the project_id, send that instead.
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{table_location=regions/&#42;&#47;zones/&#42;}/tables/&#42;"
 *       }
 *       routing_parameters {
 *         field: "table_name"
 *         path_template: "{routing_id=projects/&#42;}/&#42;*"
 *       }
 *       routing_parameters {
 *         field: "app_profile_id"
 *         path_template: "{routing_id=**}"
 *       }
 *       routing_parameters {
 *         field: "app_profile_id"
 *         path_template: "profiles/{routing_id=*}"
 *       }
 *     };
 * result:
 *     x-goog-request-params:
 *     table_location=instances/instance_bar&amp;routing_id=prof_qux
 * </pre>
 *
 * Protobuf type {@code google.api.RoutingRule}
 */
public  final class RoutingRule extends
    com.google.protobuf.GeneratedMessageLite<
        RoutingRule, RoutingRule.Builder> implements
    // @@protoc_insertion_point(message_implements:google.api.RoutingRule)
    RoutingRuleOrBuilder {
  private RoutingRule() {
    routingParameters_ = emptyProtobufList();
  }
  public static final int ROUTING_PARAMETERS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.google.api.RoutingParameter> routingParameters_;
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.api.RoutingParameter> getRoutingParametersList() {
    return routingParameters_;
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  public java.util.List<? extends com.google.api.RoutingParameterOrBuilder> 
      getRoutingParametersOrBuilderList() {
    return routingParameters_;
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  @java.lang.Override
  public int getRoutingParametersCount() {
    return routingParameters_.size();
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  @java.lang.Override
  public com.google.api.RoutingParameter getRoutingParameters(int index) {
    return routingParameters_.get(index);
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  public com.google.api.RoutingParameterOrBuilder getRoutingParametersOrBuilder(
      int index) {
    return routingParameters_.get(index);
  }
  private void ensureRoutingParametersIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.api.RoutingParameter> tmp = routingParameters_;
    if (!tmp.isModifiable()) {
      routingParameters_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void setRoutingParameters(
      int index, com.google.api.RoutingParameter value) {
    value.getClass();
  ensureRoutingParametersIsMutable();
    routingParameters_.set(index, value);
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void addRoutingParameters(com.google.api.RoutingParameter value) {
    value.getClass();
  ensureRoutingParametersIsMutable();
    routingParameters_.add(value);
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void addRoutingParameters(
      int index, com.google.api.RoutingParameter value) {
    value.getClass();
  ensureRoutingParametersIsMutable();
    routingParameters_.add(index, value);
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void addAllRoutingParameters(
      java.lang.Iterable<? extends com.google.api.RoutingParameter> values) {
    ensureRoutingParametersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, routingParameters_);
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void clearRoutingParameters() {
    routingParameters_ = emptyProtobufList();
  }
  /**
   * <pre>
   * A collection of Routing Parameter specifications.
   * **NOTE:** If multiple Routing Parameters describe the same key
   * (via the `path_template` field or via the `field` field when
   * `path_template` is not provided), "last one wins" rule
   * determines which Parameter gets used.
   * See the examples for more details.
   * </pre>
   *
   * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
   */
  private void removeRoutingParameters(int index) {
    ensureRoutingParametersIsMutable();
    routingParameters_.remove(index);
  }

  public static com.google.api.RoutingRule parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingRule parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingRule parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingRule parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingRule parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.api.RoutingRule parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.api.RoutingRule parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingRule parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.RoutingRule parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingRule parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.api.RoutingRule parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.api.RoutingRule parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.api.RoutingRule prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Specifies the routing information that should be sent along with the request
   * in the form of routing header.
   * **NOTE:** All service configuration rules follow the "last one wins" order.
   * The examples below will apply to an RPC which has the following request type:
   * Message Definition:
   *     message Request {
   *       // The name of the Table
   *       // Values can be of the following formats:
   *       // - `projects/&lt;project&gt;/tables/&lt;table&gt;`
   *       // - `projects/&lt;project&gt;/instances/&lt;instance&gt;/tables/&lt;table&gt;`
   *       // - `region/&lt;region&gt;/zones/&lt;zone&gt;/tables/&lt;table&gt;`
   *       string table_name = 1;
   *       // This value specifies routing for replication.
   *       // It can be in the following formats:
   *       // - `profiles/&lt;profile_id&gt;`
   *       // - a legacy `profile_id` that can be any string
   *       string app_profile_id = 2;
   *     }
   * Example message:
   *     {
   *       table_name: projects/proj_foo/instances/instance_bar/table/table_baz,
   *       app_profile_id: profiles/prof_qux
   *     }
   * The routing header consists of one or multiple key-value pairs. Every key
   * and value must be percent-encoded, and joined together in the format of
   * `key1=value1&amp;key2=value2`.
   * In the examples below I am skipping the percent-encoding for readablity.
   * Example 1
   * Extracting a field from the request to put into the routing header
   * unchanged, with the key equal to the field name.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take the `app_profile_id`.
   *       routing_parameters {
   *         field: "app_profile_id"
   *       }
   *     };
   * result:
   *     x-goog-request-params: app_profile_id=profiles/prof_qux
   * Example 2
   * Extracting a field from the request to put into the routing header
   * unchanged, with the key different from the field name.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take the `app_profile_id`, but name it `routing_id` in the header.
   *       routing_parameters {
   *         field: "app_profile_id"
   *         path_template: "{routing_id=**}"
   *       }
   *     };
   * result:
   *     x-goog-request-params: routing_id=profiles/prof_qux
   * Example 3
   * Extracting a field from the request to put into the routing
   * header, while matching a path template syntax on the field's value.
   * NB: it is more useful to send nothing than to send garbage for the purpose
   * of dynamic routing, since garbage pollutes cache. Thus the matching.
   * Sub-example 3a
   * The field matches the template.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take the `table_name`, if it's well-formed (with project-based
   *       // syntax).
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{table_name=projects/&#42;&#47;instances/&#42;&#47;&#42;*}"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
   * Sub-example 3b
   * The field does not match the template.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take the `table_name`, if it's well-formed (with region-based
   *       // syntax).
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{table_name=regions/&#42;&#47;zones/&#42;&#47;&#42;*}"
   *       }
   *     };
   * result:
   *     &lt;no routing header will be sent&gt;
   * Sub-example 3c
   * Multiple alternative conflictingly named path templates are
   * specified. The one that matches is used to construct the header.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take the `table_name`, if it's well-formed, whether
   *       // using the region- or projects-based syntax.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{table_name=regions/&#42;&#47;zones/&#42;&#47;&#42;*}"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{table_name=projects/&#42;&#47;instances/&#42;&#47;&#42;*}"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     table_name=projects/proj_foo/instances/instance_bar/table/table_baz
   * Example 4
   * Extracting a single routing header key-value pair by matching a
   * template syntax on (a part of) a single request field.
   * annotation:
   *     option (google.api.routing) = {
   *       // Take just the project id from the `table_name` field.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{routing_id=projects/&#42;}/&#42;*"
   *       }
   *     };
   * result:
   *     x-goog-request-params: routing_id=projects/proj_foo
   * Example 5
   * Extracting a single routing header key-value pair by matching
   * several conflictingly named path templates on (parts of) a single request
   * field. The last template to match "wins" the conflict.
   * annotation:
   *     option (google.api.routing) = {
   *       // If the `table_name` does not have instances information,
   *       // take just the project id for routing.
   *       // Otherwise take project + instance.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{routing_id=projects/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{routing_id=projects/&#42;&#47;instances/&#42;}/&#42;*"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     routing_id=projects/proj_foo/instances/instance_bar
   * Example 6
   * Extracting multiple routing header key-value pairs by matching
   * several non-conflicting path templates on (parts of) a single request field.
   * Sub-example 6a
   * Make the templates strict, so that if the `table_name` does not
   * have an instance information, nothing is sent.
   * annotation:
   *     option (google.api.routing) = {
   *       // The routing code needs two keys instead of one composite
   *       // but works only for the tables with the "project-instance" name
   *       // syntax.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{project_id=projects/&#42;}/instances/&#42;&#47;&#42;*"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "projects/&#42;&#47;{instance_id=instances/&#42;}/&#42;*"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
   * Sub-example 6b
   * Make the templates loose, so that if the `table_name` does not
   * have an instance information, just the project id part is sent.
   * annotation:
   *     option (google.api.routing) = {
   *       // The routing code wants two keys instead of one composite
   *       // but will work with just the `project_id` for tables without
   *       // an instance in the `table_name`.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{project_id=projects/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "projects/&#42;&#47;{instance_id=instances/&#42;}/&#42;*"
   *       }
   *     };
   * result (is the same as 6a for our example message because it has the instance
   * information):
   *     x-goog-request-params:
   *     project_id=projects/proj_foo&amp;instance_id=instances/instance_bar
   * Example 7
   * Extracting multiple routing header key-value pairs by matching
   * several path templates on multiple request fields.
   * NB: note that here there is no way to specify sending nothing if one of the
   * fields does not match its template. E.g. if the `table_name` is in the wrong
   * format, the `project_id` will not be sent, but the `routing_id` will be.
   * The backend routing code has to be aware of that and be prepared to not
   * receive a full complement of keys if it expects multiple.
   * annotation:
   *     option (google.api.routing) = {
   *       // The routing needs both `project_id` and `routing_id`
   *       // (from the `app_profile_id` field) for routing.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{project_id=projects/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *         field: "app_profile_id"
   *         path_template: "{routing_id=**}"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     project_id=projects/proj_foo&amp;routing_id=profiles/prof_qux
   * Example 8
   * Extracting a single routing header key-value pair by matching
   * several conflictingly named path templates on several request fields. The
   * last template to match "wins" the conflict.
   * annotation:
   *     option (google.api.routing) = {
   *       // The `routing_id` can be a project id or a region id depending on
   *       // the table name format, but only if the `app_profile_id` is not set.
   *       // If `app_profile_id` is set it should be used instead.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{routing_id=projects/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *          field: "table_name"
   *          path_template: "{routing_id=regions/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *         field: "app_profile_id"
   *         path_template: "{routing_id=**}"
   *       }
   *     };
   * result:
   *     x-goog-request-params: routing_id=profiles/prof_qux
   * Example 9
   * Bringing it all together.
   * annotation:
   *     option (google.api.routing) = {
   *       // For routing both `table_location` and a `routing_id` are needed.
   *       //
   *       // table_location can be either an instance id or a region+zone id.
   *       //
   *       // For `routing_id`, take the value of `app_profile_id`
   *       // - If it's in the format `profiles/&lt;profile_id&gt;`, send
   *       // just the `&lt;profile_id&gt;` part.
   *       // - If it's any other literal, send it as is.
   *       // If the `app_profile_id` is empty, and the `table_name` starts with
   *       // the project_id, send that instead.
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "projects/&#42;&#47;{table_location=instances/&#42;}/tables/&#42;"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{table_location=regions/&#42;&#47;zones/&#42;}/tables/&#42;"
   *       }
   *       routing_parameters {
   *         field: "table_name"
   *         path_template: "{routing_id=projects/&#42;}/&#42;*"
   *       }
   *       routing_parameters {
   *         field: "app_profile_id"
   *         path_template: "{routing_id=**}"
   *       }
   *       routing_parameters {
   *         field: "app_profile_id"
   *         path_template: "profiles/{routing_id=*}"
   *       }
   *     };
   * result:
   *     x-goog-request-params:
   *     table_location=instances/instance_bar&amp;routing_id=prof_qux
   * </pre>
   *
   * Protobuf type {@code google.api.RoutingRule}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.api.RoutingRule, Builder> implements
      // @@protoc_insertion_point(builder_implements:google.api.RoutingRule)
      com.google.api.RoutingRuleOrBuilder {
    // Construct using com.google.api.RoutingRule.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.api.RoutingParameter> getRoutingParametersList() {
      return java.util.Collections.unmodifiableList(
          instance.getRoutingParametersList());
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    @java.lang.Override
    public int getRoutingParametersCount() {
      return instance.getRoutingParametersCount();
    }/**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    @java.lang.Override
    public com.google.api.RoutingParameter getRoutingParameters(int index) {
      return instance.getRoutingParameters(index);
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder setRoutingParameters(
        int index, com.google.api.RoutingParameter value) {
      copyOnWrite();
      instance.setRoutingParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder setRoutingParameters(
        int index, com.google.api.RoutingParameter.Builder builderForValue) {
      copyOnWrite();
      instance.setRoutingParameters(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder addRoutingParameters(com.google.api.RoutingParameter value) {
      copyOnWrite();
      instance.addRoutingParameters(value);
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder addRoutingParameters(
        int index, com.google.api.RoutingParameter value) {
      copyOnWrite();
      instance.addRoutingParameters(index, value);
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder addRoutingParameters(
        com.google.api.RoutingParameter.Builder builderForValue) {
      copyOnWrite();
      instance.addRoutingParameters(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder addRoutingParameters(
        int index, com.google.api.RoutingParameter.Builder builderForValue) {
      copyOnWrite();
      instance.addRoutingParameters(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder addAllRoutingParameters(
        java.lang.Iterable<? extends com.google.api.RoutingParameter> values) {
      copyOnWrite();
      instance.addAllRoutingParameters(values);
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder clearRoutingParameters() {
      copyOnWrite();
      instance.clearRoutingParameters();
      return this;
    }
    /**
     * <pre>
     * A collection of Routing Parameter specifications.
     * **NOTE:** If multiple Routing Parameters describe the same key
     * (via the `path_template` field or via the `field` field when
     * `path_template` is not provided), "last one wins" rule
     * determines which Parameter gets used.
     * See the examples for more details.
     * </pre>
     *
     * <code>repeated .google.api.RoutingParameter routing_parameters = 2;</code>
     */
    public Builder removeRoutingParameters(int index) {
      copyOnWrite();
      instance.removeRoutingParameters(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:google.api.RoutingRule)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.api.RoutingRule();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "routingParameters_",
            com.google.api.RoutingParameter.class,
          };
          java.lang.String info =
              "\u0000\u0001\u0000\u0000\u0002\u0002\u0001\u0000\u0001\u0000\u0002\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.api.RoutingRule> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.api.RoutingRule.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.api.RoutingRule>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:google.api.RoutingRule)
  private static final com.google.api.RoutingRule DEFAULT_INSTANCE;
  static {
    RoutingRule defaultInstance = new RoutingRule();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      RoutingRule.class, defaultInstance);
  }

  public static com.google.api.RoutingRule getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<RoutingRule> PARSER;

  public static com.google.protobuf.Parser<RoutingRule> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

